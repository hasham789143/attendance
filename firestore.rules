/**
 * @fileoverview Firestore Security Rules for Attendance Tracking System
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model with ownership constraints,
 * ensuring data privacy and integrity.  Admin users have elevated privileges, while
 * other users are primarily restricted to accessing their own data or data shared with them.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; 'userId' matches Firebase Auth UID.
 * - /sessions/class-current: Single document for the current active class session.
 * - /sessions/class-current/records/{userId}: Live attendance records for the current class session.
 * - /sessions/hostel-current: Single document for the current active hostel session.
 * - /sessions/hostel-current/records/{userId}: Live attendance records for the current hostel session.
 * - /sessions/{sessionId}: Archived attendance sessions.
 * - /sessions/{sessionId}/records/{recordId}: Individual attendance records for historical sessions.
 * - /chats/{studentUid}/messages/{messageId}: Chat messages for a specific student.
 * - /settings/attendance: Application-wide settings.
 *
 * Key Security Decisions:
 * - User data is strictly controlled; users can only access their own profile information.
 * - Attendance session creation and management are restricted to admin users.
 * - Chat access is limited to admins and the specific student associated with the chat.
 * - Settings can only be modified by admins.
 *
 * Denormalization for Authorization:
 *  - No denormalization is explicitly needed in this ruleset, as ownership and roles are
 *    either directly encoded in the document paths or within the document data itself.
 *    However, consider adding "adminUid" to the Settings document in the future for simpler authorization checks.
 *
 * Structural Segregation:
 * - Separate collections are used for active vs. archived attendance sessions, improving
 *   performance and security for list operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile.
     * @path /users/{userId}
     * @allow (read, write) if request.auth.uid == userId
     * @deny (read, write) if request.auth.uid != userId
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Disable listing all users.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false; //Disallow deletion of user profiles.
    }

    /**
     * @description Allows read access to the current class attendance session, write access restricted to admins.
     * @path /sessions/class-current
     * @allow (read) if true
     * @allow (create, update, delete) if isAdmin()
     * @principle Public read, admin-only write for current class session.
     */
    match /sessions/class-current {
       function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      allow get: if true;
      allow list: if false; // Listing all sessions is not permitted.
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows students to read their own live attendance record, write access restricted to admins.
     * @path /sessions/class-current/records/{userId}
     * @allow (read) if request.auth.uid == userId
     * @allow (create, update, delete) if isAdmin()
     * @principle User-owned reads, admin-only writes for live attendance records.
     */
    match /sessions/class-current/records/{userId} {
       function isAdmin() {
        return request.auth.token.role == 'admin';
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing all records in a session is not permitted.
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
     * @description Allows read access to the current hostel attendance session, write access restricted to admins.
     * @path /sessions/hostel-current
     * @allow (read) if true
     * @allow (create, update, delete) if isAdmin()
     * @principle Public read, admin-only write for current hostel session.
     */
    match /sessions/hostel-current {
       function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      allow get: if true;
      allow list: if false; // Listing all sessions is not permitted.
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows residents to read their own live attendance record, write access restricted to admins.
     * @path /sessions/hostel-current/records/{userId}
     * @allow (read) if request.auth.uid == userId
     * @allow (create, update, delete) if isAdmin()
     * @principle User-owned reads, admin-only writes for live attendance records.
     */
    match /sessions/hostel-current/records/{userId} {
       function isAdmin() {
        return request.auth.token.role == 'admin';
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing all records in a session is not permitted.
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows read access to archived attendance sessions, write access restricted to admins.
     * @path /sessions/{sessionId}
     * @allow (read) if true
     * @allow (create, update, delete) if isAdmin()
     * @principle Public read, admin-only write for archived sessions.
     */
    match /sessions/{sessionId} {
       function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows read access to individual attendance records in archived sessions, write access restricted to admins.
     * @path /sessions/{sessionId}/records/{recordId}
     * @allow (read) if true
     * @allow (create, update, delete) if isAdmin()
     * @principle Public read, admin-only write for archived attendance records.
     */
    match /sessions/{sessionId}/records/{recordId} {
       function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows students and admins to read chat messages, only admins can write messages.
     * @path /chats/{studentUid}/messages/{messageId}
     * @allow (read) if request.auth.uid == studentUid || isAdmin()
     * @allow (create) if isAdmin()
     * @deny (create) if !isAdmin()
     * @principle User-owned and admin-accessible chat messages.
     */
    match /chats/{studentUid}/messages/{messageId} {
       function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      function isStudent(studentUid) {
        return request.auth.uid == studentUid;
      }

      allow get: if isStudent(studentUid) || isAdmin();
      allow list: if false; // Disable listing messages.
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows admins to read and write application-wide settings.
     * @path /settings/attendance
     * @allow (read, write) if isAdmin()
     * @deny (read, write) if !isAdmin()
     * @principle Admin-only access to application settings.
     */
    match /settings/attendance {
       function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      allow get: if isAdmin();
      allow list: if false; // There is only one document, listing is not relevant.
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}