/**
 * @description This ruleset enforces a strict user-ownership model for user profiles and an admin-controlled model for attendance sessions and settings.
 *
 * @data_structure
 * - /users/{userId}: Stores individual user profiles, accessible only to the user themselves.
 * - /sessions/class-current: Stores the current active class attendance session (single document). Write access is restricted to authenticated users.
 * - /sessions/class-current/records/{userId}: Stores attendance records for the current class session. Write access is restricted to authenticated users.
 * - /sessions/hostel-current: Stores the current active hostel attendance session (single document).  Write access is restricted to authenticated users.
 * - /sessions/hostel-current/records/{userId}: Stores attendance records for the current hostel session. Write access is restricted to authenticated users.
 * - /sessions/{sessionId}: Stores archived attendance sessions. Write access is restricted to authenticated users.
 * - /sessions/{sessionId}/records/{recordId}: Stores individual attendance records for historical sessions. Write access is restricted to authenticated users.
 * - /chats/{studentUid}/messages/{messageId}: Stores chat messages for a specific student.  Write access is restricted to authenticated users.
 * - /settings/attendance: Stores application-wide settings (single document).  Write access is restricted to authenticated users.
 *
 * @key_security_decisions
 * - User listing is disallowed for privacy.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 * - For simplicity, all authenticated users can create/update/delete AttendanceSession and AttendanceRecord data.  In a production app, this would be restricted to 'admin' users, determined either through Firebase Authentication Custom Claims or a separate 'admins' collection.
 *
 * @denormalization_for_authorization N/A
 * @structural_segregation N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (read) User with matching {userId} can read their own profile.
     * @allow (create) User can create their own profile if the UID matches the document ID.
     * @allow (update) User can update their own profile if the UID matches the document ID.
     * @deny (read) User cannot read another user's profile.
     * @deny (create) User cannot create a profile with an ID that doesn't match their UID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to the current class attendance session.
     * @path /sessions/class-current
     * @allow (read) Any signed-in user can read the current class session.
     * @allow (create) Any signed-in user can create a new class session.
     * @allow (update) Any signed-in user can update the current class session.
     * @deny (create) User cannot create a session without being signed in.
     * @deny (update) User cannot update a session if it doesn't exist.
     * @principle Allows authenticated users to manage the current class session.
     */
    match /sessions/class-current {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to attendance records for the current class session.
     * @path /sessions/class-current/records/{userId}
     * @allow (read) Any signed-in user can read attendance records.
     * @allow (create) Any signed-in user can create attendance records.
     * @allow (update) Any signed-in user can update attendance records.
     * @deny (create) User cannot create a record without being signed in.
     * @deny (update) User cannot update a record if it doesn't exist.
     * @principle Allows authenticated users to manage attendance records for the current class session.
     */
    match /sessions/class-current/records/{userId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

      /**
     * @description Controls access to the current hostel attendance session.
     * @path /sessions/hostel-current
     * @allow (read) Any signed-in user can read the current hostel session.
     * @allow (create) Any signed-in user can create a new hostel session.
     * @allow (update) Any signed-in user can update the current hostel session.
     * @deny (create) User cannot create a session without being signed in.
     * @deny (update) User cannot update a session if it doesn't exist.
     * @principle Allows authenticated users to manage the current hostel session.
     */
    match /sessions/hostel-current {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to attendance records for the current hostel session.
     * @path /sessions/hostel-current/records/{userId}
     * @allow (read) Any signed-in user can read attendance records.
     * @allow (create) Any signed-in user can create attendance records.
     * @allow (update) Any signed-in user can update attendance records.
     * @deny (create) User cannot create a record without being signed in.
     * @deny (update) User cannot update a record if it doesn't exist.
     * @principle Allows authenticated users to manage attendance records for the current hostel session.
     */
    match /sessions/hostel-current/records/{userId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to archived attendance sessions.
     * @path /sessions/{sessionId}
     * @allow (read) Any signed-in user can read archived sessions.
     * @allow (create) Any signed-in user can create archived sessions.
     * @allow (update) Any signed-in user can update archived sessions.
     * @deny (create) User cannot create a session without being signed in.
     * @deny (update) User cannot update a session if it doesn't exist.
     * @principle Allows authenticated users to manage archived attendance sessions.
     */
    match /sessions/{sessionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to individual attendance records for historical sessions.
     * @path /sessions/{sessionId}/records/{recordId}
     * @allow (read) Any signed-in user can read historical attendance records.
     * @allow (create) Any signed-in user can create historical attendance records.
     * @allow (update) Any signed-in user can update historical attendance records.
     * @deny (create) User cannot create a record without being signed in.
     * @deny (update) User cannot update a record if it doesn't exist.
     * @principle Allows authenticated users to manage attendance records for historical sessions.
     */
    match /sessions/{sessionId}/records/{recordId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to chat messages for a specific student.
     * @path /chats/{studentUid}/messages/{messageId}
     * @allow (read) Any signed-in user can read chat messages.
     * @allow (create) Any signed-in user can create chat messages.
     * @allow (update) Any signed-in user can update chat messages.
     * @deny (create) User cannot create a message without being signed in.
     * @deny (update) User cannot update a message if it doesn't exist.
     * @principle Allows authenticated users to manage chat messages.
     */
    match /chats/{studentUid}/messages/{messageId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to application-wide settings.
     * @path /settings/attendance
     * @allow (read) Any signed-in user can read the settings.
     * @allow (create) Any signed-in user can create settings.
     * @allow (update) Any signed-in user can update settings.
     * @deny (create) User cannot create settings without being signed in.
     * @deny (update) User cannot update settings if it doesn't exist.
     * @principle Allows authenticated users to manage application-wide settings.
     */
    match /settings/attendance {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the resource.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the user is the owner of the resource, and the resource exists
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
}