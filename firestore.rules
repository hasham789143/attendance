/**
 * @file Firebase Security Rules for Attendance Tracking System
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user data,
 * and role-based access for administrative functions. Data validation is relaxed to
 * allow for rapid prototyping, focusing on authorization.
 *
 * @data_structure
 * - /users/{userId}: Stores user profiles. Only the user themselves can read/write their own profile.
 * - /sessions/class-current: Stores the current active class attendance session (single document).
 *   - /sessions/class-current/records/{userId}: Stores live attendance records for each student.
 * - /sessions/hostel-current: Stores the current active hostel attendance session (single document).
 *   - /sessions/hostel-current/records/{userId}: Stores live attendance records for each resident.
 * - /sessions/{sessionId}: Stores archived attendance sessions.
 *   - /sessions/{sessionId}/records/{recordId}: Stores individual attendance records for a specific historical session.
 * - /chats/{studentUid}/messages/{messageId}: Stores chat messages for a specific student. Admins can access all chats.
 * - /settings/attendance: Stores application-wide settings (single document).
 *
 * @key_security_decisions
 * - Users can only read and write their own data under /users/{userId}.
 * - Listing of users is explicitly denied to prevent unauthorized access to user data.
 * - Admin role is required for modifying application-wide settings.
 * - Chat messages are restricted to admins and the specific student.
 * - Public read access is not granted to any collections containing private data.
 *
 * @denormalization_for_authorization N/A - No denormalization is needed in this ruleset.
 *
 * @structural_segregation Private user data is stored under /users/{userId} to enforce clear ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile data. Only the user themselves can read or write their own profile.
     * @path /users/{userId}
     * @allow (create, update, delete, get) User 'PiT6yX986WdkkN2NMrq72ejsamT2' can create, update, delete, and get their own profile at /users/PiT6yX986WdkkN2NMrq72ejsamT2.
     * @deny (create, update, delete, get) User 'OtherUserId' cannot access data at /users/PiT6yX986WdkkN2NMrq72ejsamT2.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) && resource.data.uid == userId;
      allow delete: if isOwner(userId) && resource.data.uid == userId;
    }

    /**
     * @description Controls access to the current class attendance session.
     * @path /sessions/class-current
     * @allow (get) Any authenticated user can read the current class session.
     * @allow (create, update, delete) Only admins can create, update, or delete the current class session.
     * @deny (create, update, delete) Non-admin users cannot modify the current class session.
     * @principle Role-based access control for administrative functions.
     */
    match /sessions/class-current {
       function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages live attendance records for the current class session.
     * @path /sessions/class-current/records/{userId}
     * @allow (get, create, update, delete) Only admins can get, create, update, or delete attendance records.
     * @deny (get, create, update, delete) Non-admin users cannot access attendance records.
     * @principle Role-based access control for administrative functions.
     */
    match /sessions/class-current/records/{userId} {
      function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
    
    /**
     * @description Controls access to the current hostel attendance session.
     * @path /sessions/hostel-current
     * @allow (get) Any authenticated user can read the current hostel session.
     * @allow (create, update, delete) Only admins can create, update, or delete the current hostel session.
     * @deny (create, update, delete) Non-admin users cannot modify the current hostel session.
     * @principle Role-based access control for administrative functions.
     */
    match /sessions/hostel-current {
       function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages live attendance records for the current hostel session.
     * @path /sessions/hostel-current/records/{userId}
     * @allow (get, create, update, delete) Only admins can get, create, update, or delete attendance records.
     * @deny (get, create, update, delete) Non-admin users cannot access attendance records.
     * @principle Role-based access control for administrative functions.
     */
    match /sessions/hostel-current/records/{userId} {
      function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to archived attendance sessions.
     * @path /sessions/{sessionId}
     * @allow (get) Any authenticated user can read an archived session.
     * @allow (create, update, delete) Only admins can create, update, or delete archived sessions.
     * @deny (create, update, delete) Non-admin users cannot modify archived sessions.
     * @principle Role-based access control for administrative functions.
     */
    match /sessions/{sessionId} {
       function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages attendance records for a specific historical session.
     * @path /sessions/{sessionId}/records/{recordId}
     * @allow (get, create, update, delete) Only admins can get, create, update, or delete attendance records.
     * @deny (get, create, update, delete) Non-admin users cannot access attendance records.
     * @principle Role-based access control for administrative functions.
     */
    match /sessions/{sessionId}/records/{recordId} {
      function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages chat messages for a specific student. Admins can access all chats, while students can only access their own.
     * @path /chats/{studentUid}/messages/{messageId}
     * @allow (get, list, create) Admins can get, list, and create messages. Students can only read and create messages in their own chat.
     * @deny (get, list) Students cannot access other students' chat messages.
     * @principle Combines role-based and ownership-based access control.
     */
    match /chats/{studentUid}/messages/{messageId} {
      function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      function isOwner(studentUid) {
        return request.auth.uid == studentUid;
      }

      allow get: if isAdmin() || isOwner(studentUid);
      allow list: if isAdmin() || isOwner(studentUid);
      allow create: if isAdmin() || isOwner(studentUid);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Protects application-wide settings. Only admins can read and write settings.
     * @path /settings/attendance
     * @allow (get, update) Admins can get and update the settings.
     * @deny (get, update) Non-admin users cannot modify the settings.
     * @principle Role-based access control for administrative functions.
     */
    match /settings/attendance {
       function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      allow get: if isAdmin();
      allow list: if false;
      allow create: if false;
      allow update: if isAdmin() && resource != null;
      allow delete: if false;
    }
  }
}