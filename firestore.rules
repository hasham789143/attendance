/**
 * @file Firebase Security Rules for Attendance Tracking System
 *
 * @core_philosophy This ruleset enforces a user-ownership model for user profiles and allows open reads for class data.
 *   Attendance sessions and records are writeable by authenticated users.
 * @data_structure
 *   - `/users/{userId}`: Stores user profile data, with 'userId' matching the Firebase Auth UID.
 *   - `/attendance/{attendanceId}`: Stores attendance records.
 *   - `/classes/{classId}`: Stores class data.
 * @key_security_decisions
 *   - Users can only read and write their own profile data.
 *   - Attendance data is writeable by any authenticated user.
 *   - Class data is readable by any authenticated user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile data.
     * @path /users/{userId}
     * @allow (read, write) if request.auth.uid == userId (User authenticates as themself)
     * @deny (read, write) if request.auth.uid != userId (User attempts to access another user's profile)
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing of all user profiles.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && isExistingOwner(userId);
      allow delete: if isOwner(userId) && isExistingOwner(userId);
    }

    /**
     * @description Allows any authenticated user to read and write attendance data.
     * @path /attendance/{document=**}
     * @allow (read, write) if request.auth != null (User is authenticated)
     * @deny (read, write) if request.auth == null (User is not authenticated)
     * @principle Allows open access to attendance records for authenticated users.
     */
    match /attendance/{document=**} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows any authenticated user to read class data.
     * @path /classes/{document=**}
     * @allow (read) if request.auth != null (User is authenticated)
     * @deny (read) if request.auth == null (User is not authenticated)
     * @principle Allows open read access to class data for authenticated users.
     */
    match /classes/{document=**} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Place holder rules for settings document.
     * @path /settings/attendance
     */
    match /settings/attendance {
        allow get: if true; // TODO: Add more granular read permission if necessary
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}