/**
 * @fileoverview Firestore Security Rules for Attendance Tracking System
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and restricts
 * access to attendance sessions and records based on user roles and session
 * ownership. Application-wide settings are publicly readable but only
 * editable by admins.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, where userId matches the
 *   Firebase Auth UID.
 * - /sessions/current: Stores the current active attendance session.
 * - /attendance/{attendanceId}: Stores individual attendance records.
 * - /settings/attendance: Stores application-wide settings. There is only
 *   one document with id 'attendance' in this collection.
 *
 * Key Security Decisions:
 * - Users can only read their own profile data.
 * - Attendance sessions are accessible based on ownership.
 * - Attendance records are accessible to all.
 * - Only admins can modify application-wide settings.
 *
 * Denormalization for Authorization:
 *  N/A
 *
 * Structural Segregation:
 * N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get) Authenticated user can read their own profile.
     * @deny (get) Authenticated user cannot read another user's profile.
     * @allow (create) Authenticated user can create their own profile.
     * @deny (create) Unauthenticated user cannot create a profile.
     * @allow (update) Authenticated user can update their own profile.
     * @deny (update) Authenticated user cannot update another user's profile.
     * @allow (delete) Authenticated user can delete their own profile.
     * @deny (delete) Authenticated user cannot delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to the current attendance session.
     * @path /sessions/current
     * @allow (get) Any authenticated user can get the current session.
     * @deny (create) Only admins can create an attendance session.
     * @allow (update) Only admins can update the current session.
     * @deny (delete) Only admins can delete the current session.
     * @principle Restricts write access based on user roles.
     */
    match /sessions/current {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to individual attendance records.
     * @path /attendance/{attendanceId}
     * @allow (get) Any authenticated user can get an attendance record.
     * @allow (list) Any authenticated user can list attendance records.
     * @deny (create) Only authenticated users can create attendance records.
     * @allow (update) Only authenticated users can update attendance records.
     * @deny (delete) Only admins can delete attendance records.
     * @principle Allows public read access but restricts write access.
     */
    match /attendance/{attendanceId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to application-wide settings.
     * @path /settings/attendance
     * @allow (get) Any user can read the settings.
     * @deny (create) Only admins can create settings.
     * @allow (update) Only admins can update the settings.
     * @deny (delete) No one can delete the settings.
     * @principle Restricts write access based on user roles.
     */
    match /settings/attendance {
      allow get: if true;
      allow list: if false;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}