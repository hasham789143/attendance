/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and chat messages.
 *   Attendance sessions and records are secured using a combination of ownership and role-based access.
 *   Application-wide settings are publicly readable.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only by the user themselves.
 * - /chats/{studentUid}/messages/{messageId}: Chat messages for a specific student, accessible only by that student. Admins can not access all chats.
 * - /sessions/class-current: The current active class attendance session.
 * - /sessions/class-current/records/{userId}: Live attendance records for the current class session.
 * - /sessions/hostel-current: The current active hostel attendance session.
 * - /sessions/hostel-current/records/{userId}: Live attendance records for the current hostel session.
 * - /sessions/{sessionId}: Archived attendance sessions.
 * - /sessions/{sessionId}/records/{recordId}: Archived attendance records.
 * - /settings/attendance: Application-wide settings.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied via missing rule.
 * - Settings are publicly readable.
 * - Default security posture for ambiguous relationships is strict owner-only access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read and write their own user document.
     * @path /users/{userId}
     * @allow (read, write) if request.auth.uid == userId
     * @deny (read, write) if request.auth.uid != userId
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to read and write only their own chat messages.
     * @path /chats/{chatOwnerId}/messages/{messageId}
     * @allow (read, write) if request.auth.uid == chatOwnerId
     * @deny (read, write) if request.auth.uid != chatOwnerId
     * @principle Enforces document ownership for chat messages.
     */
    match /chats/{chatOwnerId}/messages/{messageId} {
      allow get: if isOwner(chatOwnerId);
      allow list: if isOwner(chatOwnerId);
      allow create: if isOwner(chatOwnerId);
      allow update: if isOwner(chatOwnerId);
      allow delete: if isOwner(chatOwnerId);
    }

    /**
     * @description Allows public read access for app configuration.
     * @path /settings/{document=**}
     * @allow (read) any authenticated or unauthenticated client
     * @deny (write) all clients
     * @principle Provides public access for application settings.
     */
    match /settings/{document=**} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows admins to read and write the current class attendance session.
     * @path /sessions/class-current
     * @allow (read) any authenticated client
     * @allow (write) only admins
     * @principle Restricts access to class attendance sessions.
     */
    match /sessions/class-current {
        allow get: if true;
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Allows admins to read and write the live attendance records for the current class session.
     * @path /sessions/class-current/records/{userId}
     * @allow (read) any authenticated client
     * @allow (write) only admins
     * @principle Restricts access to class attendance records.
     */
    match /sessions/class-current/records/{userId} {
        allow get: if true;
        allow list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Allows admins to read and write the current hostel attendance session.
     * @path /sessions/hostel-current
     * @allow (read) any authenticated client
     * @allow (write) only admins
     * @principle Restricts access to hostel attendance sessions.
     */
    match /sessions/hostel-current {
        allow get: if true;
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Allows admins to read and write the live attendance records for the current hostel session.
     * @path /sessions/hostel-current/records/{userId}
     * @allow (read) any authenticated client
     * @allow (write) only admins
     * @principle Restricts access to hostel attendance records.
     */
    match /sessions/hostel-current/records/{userId} {
        allow get: if true;
        allow list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Allows admins to manage archived attendance sessions.
     * @path /sessions/{sessionId}
     */
    match /sessions/{sessionId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows admins to manage archived attendance records for a specific historical session.
     * @path /sessions/{sessionId}/records/{recordId}
     */
    match /sessions/{sessionId}/records/{recordId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && (request.auth.token.role == 'admin');
    }

    /**
     * @description Denies all other read and write requests by default.
     * @path /{document=**}
     * @allow None
     * @deny All requests
     * @principle Implements least privilege; explicitly denies all access not otherwise allowed.
     */
    match /{document=**} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}