/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with ownership constraints.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the owner.
 * - /sessions/class-current: Current class attendance session (single document), writeable by admins.
 * - /sessions/class-current/records/{userId}: Attendance records for the current class session.
 * - /sessions/hostel-current: Current hostel attendance session (single document), writeable by admins.
 * - /sessions/hostel-current/records/{userId}: Attendance records for the current hostel session.
 * - /sessions/{sessionId}: Archived attendance sessions, writeable by admins.
 * - /sessions/{sessionId}/records/{recordId}: Attendance records for archived sessions.
 * - /chats/{studentUid}/messages/{messageId}: Chat messages, accessible by admins and the student.
 * - /settings/attendance: Application-wide settings (single document), writeable by admins.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Admins have full access to attendance sessions and settings.
 * - Chats are accessible to admins and the associated student.
 * - Listing of users is disallowed.
 * - No public read access is permitted.
 *
 * Denormalization for Authorization:
 * - Attendance records should denormalize the student's UID for efficient access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles, ensuring users can only access their own data.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) User with matching UID can read, update, and delete their profile.
     * @deny (create) User trying to create a profile with a mismatched UID.
     * @deny (get, update, delete) User trying to access another user's profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages the current class attendance session. Only admins can modify.
     * @path /sessions/class-current
     * @allow (get) Anyone can read the current class attendance session.
     * @allow (create, update, delete) Only admins can create, update, or delete the session.
     * @deny (create, update, delete) Non-admins cannot modify the session.
     * @principle Restricts write access to admins only.
     */
    match /sessions/class-current {
        function isAdmin() {
            return request.auth.token.role == 'admin';
        }

        allow get: if true;
        allow list: if false;
        allow create: if isSignedIn() && isAdmin();
        allow update: if isSignedIn() && isAdmin();
        allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages attendance records for the current class session. Admins can write, students can only create their own record.
     * @path /sessions/class-current/records/{userId}
     * @allow (create) Students can create their own attendance record with matching UID.
     * @allow (get) Anyone can read the attendance record.
     * @allow (update, delete) Only admins can update or delete records.
     * @deny (create) Students cannot create attendance records for other users.
     * @deny (update, delete) Non-admins cannot modify attendance records.
     * @principle Restricts write access based on role and ownership.
     */
    match /sessions/class-current/records/{userId} {
        function isAdmin() {
            return request.auth.token.role == 'admin';
        }

        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        allow get: if true;
        allow list: if false;
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isAdmin();
        allow delete: if isSignedIn() && isAdmin();
    }

        /**
     * @description Manages the current hostel attendance session. Only admins can modify.
     * @path /sessions/hostel-current
     * @allow (get) Anyone can read the current hostel attendance session.
     * @allow (create, update, delete) Only admins can create, update, or delete the session.
     * @deny (create, update, delete) Non-admins cannot modify the session.
     * @principle Restricts write access to admins only.
     */
    match /sessions/hostel-current {
        function isAdmin() {
            return request.auth.token.role == 'admin';
        }

        allow get: if true;
        allow list: if false;
        allow create: if isSignedIn() && isAdmin();
        allow update: if isSignedIn() && isAdmin();
        allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages attendance records for the current hostel session. Admins can write, residents can only create their own record.
     * @path /sessions/hostel-current/records/{userId}
     * @allow (create) Residents can create their own attendance record with matching UID.
     * @allow (get) Anyone can read the attendance record.
     * @allow (update, delete) Only admins can update or delete records.
     * @deny (create) Residents cannot create attendance records for other users.
     * @deny (update, delete) Non-admins cannot modify attendance records.
     * @principle Restricts write access based on role and ownership.
     */
    match /sessions/hostel-current/records/{userId} {
        function isAdmin() {
            return request.auth.token.role == 'admin';
        }

        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        allow get: if true;
        allow list: if false;
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isAdmin();
        allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages archived attendance sessions. Only admins can modify.
     * @path /sessions/{sessionId}
     * @allow (get) Anyone can read archived attendance sessions.
     * @allow (create, update, delete) Only admins can create, update, or delete sessions.
     * @deny (create, update, delete) Non-admins cannot modify sessions.
     * @principle Restricts write access to admins only.
     */
    match /sessions/{sessionId} {
        function isAdmin() {
            return request.auth.token.role == 'admin';
        }

        allow get: if true;
        allow list: if false;
        allow create: if isSignedIn() && isAdmin();
        allow update: if isSignedIn() && isAdmin();
        allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages attendance records for specific historical sessions. Only admins can modify.
     * @path /sessions/{sessionId}/records/{recordId}
     * @allow (get) Anyone can read historical attendance records.
     * @allow (create, update, delete) Only admins can create, update, or delete records.
     * @deny (create, update, delete) Non-admins cannot modify records.
     * @principle Restricts write access to admins only.
     */
    match /sessions/{sessionId}/records/{recordId} {
        function isAdmin() {
            return request.auth.token.role == 'admin';
        }

        allow get: if true;
        allow list: if false;
        allow create: if isSignedIn() && isAdmin();
        allow update: if isSignedIn() && isAdmin();
        allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages chat messages. Admins can access all chats; students can access their own.
     * @path /chats/{studentUid}/messages/{messageId}
     * @allow (get, list) Admins and the associated student can read messages.
     * @allow (create) Admins and the associated student can create messages.
     * @allow (update, delete) Only admins can update or delete messages.
     * @deny (get, list, create) Students cannot access other students' chats.
     * @deny (update, delete) Non-admins cannot modify chat messages.
     * @principle Enforces access based on role and ownership.
     */
    match /chats/{studentUid}/messages/{messageId} {
        function isAdmin() {
            return request.auth.token.role == 'admin';
        }

        function isOwner(studentUid) {
            return request.auth.uid == studentUid;
        }

        allow get: if isSignedIn() && (isAdmin() || isOwner(studentUid));
        allow list: if isSignedIn() && (isAdmin() || isOwner(studentUid));
        allow create: if isSignedIn() && (isAdmin() || isOwner(studentUid));
        allow update: if isSignedIn() && isAdmin();
        allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages application-wide settings. Only admins can modify.
     * @path /settings/attendance
     * @allow (get) Anyone can read the application settings.
     * @allow (create, update, delete) Only admins can create, update, or delete settings.
     * @deny (create, update, delete) Non-admins cannot modify settings.
     * @principle Restricts write access to admins only.
     */
    match /settings/attendance {
        function isAdmin() {
            return request.auth.token.role == 'admin';
        }

        allow get: if true;
        allow list: if false;
        allow create: if isSignedIn() && isAdmin();
        allow update: if isSignedIn() && isAdmin();
        allow delete: if isSignedIn() && isAdmin();
    }
  }
}