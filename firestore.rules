/**
 * @fileoverview Firestore Security Rules for Attendance Tracking System
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model (admin, viewer) with user-specific data isolation and admin override capabilities.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with 'userId' matching the Firebase Auth UID.
 * - /sessions/class-current: Stores the currently active class session details. Single document.
 * - /sessions/class-current/records/{userId}: Stores attendance records for the active class session.
 * - /sessions/hostel-current: Stores the currently active hostel session details. Single document.
 * - /sessions/hostel-current/records/{userId}: Stores attendance records for the active hostel session.
 * - /sessions/{sessionId}: Stores archived session details.
 * - /sessions/{sessionId}/records/{recordId}: Stores archived attendance records.
 * - /chats/{studentUid}/messages/{messageId}: Stores chat messages for individual students.
 * - /settings/attendance: Stores application-wide settings. Single document with ID 'attendance'.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data in /users/{userId}.
 * - Only admins can read/write the /settings/attendance document.
 * - Only admins can create/update/delete attendance sessions.
 * - Students can only create attendance records under active sessions.
 * - Students can read chat messages directed to them. Admins can read all chats.
 * - Data shape is not strictly validated in this prototyping phase.
 *
 * Denormalization for Authorization:
 * - Attendance sessions store the 'adminUid' to quickly check ownership for update/delete operations.
 *
 * Structural Segregation:
 * - Separate collections for current (class-current, hostel-current) and archived attendance sessions improve query performance and data management.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) User can access their own profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (list) User listing is not permitted.
     * @principle Enforces document ownership for writes and restricts listing.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages the current class attendance session.
     * @path /sessions/class-current
     * @allow (get) Anyone can read the current session.
     * @allow (create, update, delete) Only admins can manage the current session.
     * @deny (create, update, delete) Non-admins cannot manage the current session.
     * @deny (list) Listing is not permitted.
     * @principle Restricts session management to admins, allows public read.
     */
    match /sessions/class-current {
       function isAdmin() {
        return request.auth.token.role == 'admin';
      }
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages attendance records for the current class session.
     * @path /sessions/class-current/records/{userId}
     * @allow (create) Users can create their own attendance record if signed in.
     * @allow (get) Admins and the record owner can read the record.
     * @deny (update, delete) Updates and deletes are not allowed.
     * @deny (list) Listing is not permitted.
     * @principle Enforces user-specific write access and admin read access.
     */
    match /sessions/class-current/records/{userId} {
       function isAdmin() {
        return request.auth.token.role == 'admin';
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isSignedIn() && (isAdmin() || isOwner(userId));
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages the current hostel attendance session.
     * @path /sessions/hostel-current
     * @allow (get) Anyone can read the current session.
     * @allow (create, update, delete) Only admins can manage the current session.
     * @deny (create, update, delete) Non-admins cannot manage the current session.
     * @deny (list) Listing is not permitted.
     * @principle Restricts session management to admins, allows public read.
     */
    match /sessions/hostel-current {
       function isAdmin() {
        return request.auth.token.role == 'admin';
      }
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages attendance records for the current hostel session.
     * @path /sessions/hostel-current/records/{userId}
     * @allow (create) Users can create their own attendance record if signed in.
     * @allow (get) Admins and the record owner can read the record.
     * @deny (update, delete) Updates and deletes are not allowed.
     * @deny (list) Listing is not permitted.
     * @principle Enforces user-specific write access and admin read access.
     */
    match /sessions/hostel-current/records/{userId} {
       function isAdmin() {
        return request.auth.token.role == 'admin';
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isSignedIn() && (isAdmin() || isOwner(userId));
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages archived attendance sessions.
     * @path /sessions/{sessionId}
     * @allow (get) Admins can retrieve archived session details.
     * @allow (create, update, delete) Only admins can manage the archived sessions.
     * @deny (create, update, delete) Non-admins cannot manage the archived sessions.
     * @deny (list) Listing is not permitted.
     * @principle Restricts session management to admins.
     */
    match /sessions/{sessionId} {
      function isAdmin() {
        return request.auth.token.role == 'admin';
      }
      allow get: if isSignedIn() && isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages archived attendance records for a specific session.
     * @path /sessions/{sessionId}/records/{recordId}
     * @allow (get) Admins can retrieve archived attendance records.
     * @deny (create, update, delete) No one can create, update or delete the archived attendance records.
     * @deny (list) Listing is not permitted.
     * @principle Restricts management of archived records to admins.
     */
    match /sessions/{sessionId}/records/{recordId} {
      function isAdmin() {
        return request.auth.token.role == 'admin';
      }
      allow get: if isSignedIn() && isAdmin();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages chat messages between students and admins.
     * @path /chats/{studentUid}/messages/{messageId}
     * @allow (get, create) Students can read and create messages in their own chat. Admins can read all chats.
     * @deny (update, delete) Updates and deletes are not allowed.
     * @deny (list) Listing is not permitted.
     * @principle Enforces user-specific chat access with admin oversight.
     */
    match /chats/{studentUid}/messages/{messageId} {
      function isAdmin() {
        return request.auth.token.role == 'admin';
      }
      function isOwner(studentUid) {
        return request.auth.uid == studentUid;
      }
      allow get: if isSignedIn() && (isAdmin() || isOwner(studentUid));
      allow list: if false;
      allow create: if isSignedIn() && (isAdmin() || isOwner(studentUid));
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages application-wide settings.
     * @path /settings/attendance
     * @allow (get, update) Only admins can read and update the settings.
     * @deny (create, delete) No one can create or delete the settings.
     * @deny (list) Listing is not permitted.
     * @principle Restricts settings management to admins.
     */
    match /settings/attendance {
      function isAdmin() {
        return request.auth.token.role == 'admin';
      }
      allow get: if isSignedIn() && isAdmin();
      allow list: if false;
      allow create: if false;
      allow update: if isSignedIn() && isAdmin();
      allow delete: if false;
    }
  }
}