/**
 * @fileoverview Firestore Security Rules for Attendance Tracking System
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and an admin-controlled model for attendance sessions and records.
 * Chat messages are scoped to individual students, with admin access.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, where {userId} is the Firebase Auth UID.
 * - /sessions/class-current: Current active class session (single document).
 * - /sessions/class-current/records/{userId}: Attendance records for the current class session.
 * - /sessions/hostel-current: Current active hostel session (single document).
 * - /sessions/hostel-current/records/{userId}: Attendance records for the current hostel session.
 * - /sessions/{sessionId}: Archived attendance sessions.
 * - /sessions/{sessionId}/records/{recordId}: Archived attendance records.
 * - /chats/{studentUid}/messages/{messageId}: Chat messages for a specific student.
 * - /settings/attendance: Application-wide settings (single document).
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Attendance session and record creation/modification is restricted to admins.
 * - Chat messages can be read by admins or the student to whom the chat belongs.
 * - Settings can only be read and updated by admins.
 *
 * Denormalization for Authorization:
 *  - To simplify rules, the `adminUid` field is present on AttendanceSession documents, enabling direct ownership checks without needing to query a separate user document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) User can access and modify their own profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (list) Listing all users is not permitted.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to the current class attendance session.
     * @path /sessions/class-current
     * @allow (get) Any signed-in user can get the current session.
     * @allow (create, update, delete) Only admins can create, update, or delete the current session.
     * @deny (create) Non-admins cannot create a session.
     * @principle Requires admin role for session management.
     */
    match /sessions/class-current {
        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin() {
            return request.auth.token.role == 'admin';
        }

        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Controls access to attendance records for the current class session.
     * @path /sessions/class-current/records/{userId}
     * @allow (get) Any signed-in user can get attendance records.
     * @allow (create, update, delete) Only admins can create, update, or delete attendance records.
     * @deny (create) Non-admins cannot create attendance records.
     * @principle Requires admin role for record management.
     */
    match /sessions/class-current/records/{userId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin() {
            return request.auth.token.role == 'admin';
        }

        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Controls access to the current hostel attendance session.
     * @path /sessions/hostel-current
     * @allow (get) Any signed-in user can get the current session.
     * @allow (create, update, delete) Only admins can create, update, or delete the current session.
     * @deny (create) Non-admins cannot create a session.
     * @principle Requires admin role for session management.
     */
    match /sessions/hostel-current {
        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin() {
            return request.auth.token.role == 'admin';
        }

        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Controls access to attendance records for the current hostel session.
     * @path /sessions/hostel-current/records/{userId}
     * @allow (get) Any signed-in user can get attendance records.
     * @allow (create, update, delete) Only admins can create, update, or delete attendance records.
     * @deny (create) Non-admins cannot create attendance records.
     * @principle Requires admin role for record management.
     */
    match /sessions/hostel-current/records/{userId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin() {
            return request.auth.token.role == 'admin';
        }

        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Controls access to archived attendance sessions.
     * @path /sessions/{sessionId}
     * @allow (get) Any signed-in user can get archived sessions.
     * @allow (create, update, delete) Only admins can create, update, or delete archived sessions.
     * @deny (create) Non-admins cannot create a session.
     * @principle Requires admin role for session management.
     */
    match /sessions/{sessionId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin() {
            return request.auth.token.role == 'admin';
        }

        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Controls access to archived attendance records.
     * @path /sessions/{sessionId}/records/{recordId}
     * @allow (get) Any signed-in user can get archived records.
     * @allow (create, update, delete) Only admins can create, update, or delete archived records.
     * @deny (create) Non-admins cannot create attendance records.
     * @principle Requires admin role for record management.
     */
    match /sessions/{sessionId}/records/{recordId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin() {
            return request.auth.token.role == 'admin';
        }

        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Controls access to chat messages for a specific student.
     * @path /chats/{studentUid}/messages/{messageId}
     * @allow (get, list) Admin or the student can read messages.
     * @allow (create) Any signed-in user can create a message.
     * @allow (update, delete) Only the owner (sender) of the message can update or delete it.
     * @deny (create) Non-admins and non-owners cannot create messages for other students.
     * @principle Allows student and admin read access; restricts write access to message owner.
     */
    match /chats/{studentUid}/messages/{messageId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin() {
            return request.auth.token.role == 'admin';
        }

        function isOwner(studentUid) {
            return request.auth.uid == studentUid;
        }

        function isMessageOwner() {
             return request.auth.uid == resource.data.senderUid;
        }

        allow get: if isAdmin() || isOwner(studentUid);
        allow list: if isAdmin() || isOwner(studentUid);
        allow create: if isSignedIn();
        allow update: if isMessageOwner();
        allow delete: if isMessageOwner();
    }

    /**
     * @description Controls access to application-wide settings.
     * @path /settings/attendance
     * @allow (get) Any signed-in user can read the settings.
     * @allow (update) Only admins can update the settings.
     * @deny (create, delete) Creation and deletion are disallowed.
     * @principle Restricts settings modification to admins.
     */
    match /settings/attendance {
        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin() {
            return request.auth.token.role == 'admin';
        }

        allow get: if isSignedIn();
        allow list: if false;
        allow create: if false;
        allow update: if isAdmin();
        allow delete: if false;
    }
  }
}