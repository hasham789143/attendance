/**
 * @fileoverview Firestore Security Rules for Attendance Tracking System
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles,
 * restricts attendance session creation to authenticated administrators,
 * and allows public read access to attendance records while limiting writes
 * to authenticated users. System settings are read-only for all users.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with 'userId' matching the Firebase Auth UID.
 * - /sessions/current: Stores the currently active attendance session.
 * - /attendance/{attendanceId}: Stores individual attendance records.
 * - /settings/attendance: Stores application-wide settings (single document).
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Users can only read settings.
 * - Only authenticated users can create attendance records.
 * - An `adminUid` field is used in AttendanceSession documents to identify the session creator for update/delete authorization.
 *
 * Denormalization for Authorization:
 * - The `AttendanceSession` includes `adminUid` to simplify write access rules.
 *   Without this, checking admin permissions would require a costly `get()` call to `/users/{adminUid}`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles under /users/{userId}.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, list, update, delete) Only the user with matching UID can access their profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isSignedIn() && isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is disallowed.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid; // Enforce immutability of uid
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure the current attendance session under /sessions/current.
     * @path /sessions/current
     * @allow (create) Only an admin can create an attendance session. Admin status is determined by checking if the user ID creating the resource is the `adminUid`.
     * @allow (get, list) Any authenticated user can read the current session.
     * @allow (update, delete) Only the admin who created the session can update or delete it, using the adminUid field on the document.
     * @deny (create) Non-admins cannot create sessions.
     * @principle Restricts session creation and modification to authorized admins, validates relational integrity.
     */
    match /sessions/current {
      function isSignedIn() {
        return request.auth != null;
      }

      // Function to check if the requesting user is the admin who created the session.
      function isAdminOfSession() {
          return isSignedIn() && resource.data.adminUid == request.auth.uid;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.adminUid == request.auth.uid;
      allow update: if isAdminOfSession();
      allow delete: if isAdminOfSession();
    }

    /**
     * @description Secure attendance records under /attendance/{attendanceId}.
     * @path /attendance/{attendanceId}
     * @allow (get, list) All users can read attendance records.
     * @allow (create) Only authenticated users can create attendance records.
     * @allow (update, delete) No one can update or delete attendance records.
     * @deny (create) Unauthenticated users cannot create attendance records.
     * @principle Allows public read access with restricted write access.
     */
    match /attendance/{attendanceId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true; // Public read access.
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Secure application settings under /settings/attendance.
     * @path /settings/attendance
     * @allow (get) All users can read application settings.
     * @deny (create, update, delete) No one can modify application settings.
     * @principle Read-only access for all users.
     */
    match /settings/attendance {
      allow get: if true;
      allow list: if false; // Prevent listing of settings documents.
      allow create, update, delete: if false;
    }
  }
}