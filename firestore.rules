/**
 * @fileoverview Firestore Security Rules for Attendance Tracking System
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and an admin-controlled model for attendance sessions and records.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the user themselves.
 * - /sessions/class-current: Stores the current active class session, writable only by admins.
 * - /sessions/class-current/records/{userId}: Stores attendance records for the current class session, writable only by admins.
 * - /sessions/hostel-current: Stores the current active hostel session, writable only by admins.
 * - /sessions/hostel-current/records/{userId}: Stores attendance records for the current hostel session, writable only by admins.
 * - /sessions/{sessionId}: Stores archived attendance sessions, writable only by admins.
 * - /sessions/{sessionId}/records/{recordId}: Stores attendance records for a specific archived session, writable only by admins.
 * - /chats/{studentUid}/messages/{messageId}: Stores chat messages for a specific student, admins can read all messages, students can only write their own messages.
 * - /settings/attendance: Stores application-wide settings, writable only by admins.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user profile data.
 * - Admins have full access to attendance sessions and records.
 * - User listing is disallowed for privacy.
 * - Settings are only accessible to admins.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Users can only read/write their own profile.
     * @path /users/{userId}
     * @allow (get, update) User with UID 'user123' can read/update /users/user123.
     * @allow (create) User with UID 'user123' can create document /users/user123.
     * @deny (get) User with UID 'user456' cannot read /users/user123.
     * @deny (update) User with UID 'user456' cannot update /users/user123.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Secure the current class attendance session. Only admins can read/write.
     * @path /sessions/class-current
     * @allow (get, list) Admin can read the current class session.
     * @allow (create, update, delete) Admin can create, update, or delete the current class session.
     * @deny (get) Non-admin cannot read the current class session.
     * @principle Restricts access to current class session data to admins.
     */
    match /sessions/class-current {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

     /**
     * @description Secure the current hostel attendance session. Only admins can read/write.
     * @path /sessions/hostel-current
     * @allow (get, list) Admin can read the current hostel session.
     * @allow (create, update, delete) Admin can create, update, or delete the current hostel session.
     * @deny (get) Non-admin cannot read the current hostel session.
     * @principle Restricts access to current hostel session data to admins.
     */
    match /sessions/hostel-current {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Secure live attendance records for the current class session. Only admins can read/write.
     * @path /sessions/class-current/records/{userId}
     * @allow (get, list) Admin can read attendance records for any student.
     * @allow (create, update, delete) Admin can create, update, or delete attendance records.
     * @deny (get) Non-admin cannot read attendance records.
     * @principle Restricts access to attendance records to admins.
     */
    match /sessions/class-current/records/{recordId} {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

     /**
     * @description Secure live attendance records for the current hostel session. Only admins can read/write.
     * @path /sessions/hostel-current/records/{userId}
     * @allow (get, list) Admin can read attendance records for any resident.
     * @allow (create, update, delete) Admin can create, update, or delete attendance records.
     * @deny (get) Non-admin cannot read attendance records.
     * @principle Restricts access to attendance records to admins.
     */
    match /sessions/hostel-current/records/{recordId} {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Secure archived attendance sessions. Only admins can read/write.
     * @path /sessions/{sessionId}
     * @allow (get, list) Admin can read archived attendance sessions.
     * @allow (create, update, delete) Admin can create, update, or delete archived attendance sessions.
     * @deny (get) Non-admin cannot read archived attendance sessions.
     * @principle Restricts access to archived sessions to admins.
     */
    match /sessions/{sessionId} {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Secure attendance records for a specific historical session. Only admins can read/write.
     * @path /sessions/{sessionId}/records/{recordId}
     * @allow (get, list) Admin can read attendance records for a specific session.
     * @allow (create, update, delete) Admin can create, update, or delete attendance records for a specific session.
     * @deny (get) Non-admin cannot read attendance records for a specific session.
     * @principle Restricts access to historical attendance records to admins.
     */
    match /sessions/{sessionId}/records/{recordId} {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Secure chat messages for a specific student. Admins can read all messages, students can only write their own messages.
     * @path /chats/{studentUid}/messages/{messageId}
     * @allow (get, list) Admin can read all chat messages.
     * @allow (create) Student can create messages in their own chat.
     * @deny (get) Student cannot read other students' chat messages.
     * @deny (create) Student cannot create messages in other students' chats.
     * @principle Restricts chat access to admins and the specific student.
     */
    match /chats/{studentUid}/messages/{messageId} {
      allow get, list: if isAdmin();
      allow create: if isOwner(studentUid);
      allow update, delete: if false;
    }

    /**
     * @description Secure application-wide settings. Only admins can read/write.
     * @path /settings/attendance
     * @allow (get, list) Admin can read application settings.
     * @allow (create, update, delete) Admin can create, update, or delete application settings.
     * @deny (get) Non-admin cannot read application settings.
     * @principle Restricts access to application settings to admins.
     */
    match /settings/attendance {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    // ----- HELPER FUNCTIONS -----

    /**
     * @description Checks if the requesting user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user's UID matches the specified userId.
     * @param {string} userId The user ID to compare against the requesting user's UID.
     * @return {boolean} True if the user is signed in and the UIDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user has the 'admin' role.
     * @return {boolean} True if the user has the 'admin' role, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'admin';
    }
  }
}