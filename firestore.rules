/**
 * @file Firebase Security Rules for Attendance Tracking System
 * @corePhilosophy This ruleset enforces a role-based access control system, with specific rules for user profiles,
 * current and archived attendance sessions, chat messages, and application settings.
 * @dataStructure The data is organized hierarchically with user profiles stored under `/users/{userId}`,
 * attendance sessions under `/sessions/{sessionId}`, chat messages under `/chats/{studentUid}/messages/{messageId}`,
 * and settings under `/settings/attendance`.
 * @keySecurityDecisions
 *   - Only authenticated users can access their own user profiles.
 *   - Admins can create, update, and delete attendance sessions.
 *   - Students can only create attendance records for themselves.
 *   - Chat messages are restricted to admins and the specific student involved.
 *   - Only admins can read and modify application settings.
 * @denormalizationForAuthorization N/A
 * @structuralSegregation N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (read, write) if the user is signed in and the requested userId matches their authentication UID.
     * @deny (read, write) if the user is not signed in or the requested userId does not match their authentication UID.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && isExistingOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Controls access to the current active class attendance session.
     * @path /sessions/class-current
     * @allow (get, list) if true, open to all users.
     * @allow (create, update, delete) if the user is an admin.
     * @deny (create, update, delete) if the user is not an admin.
     * @principle Restricts write access to admins for current attendance sessions.
     */
    match /sessions/class-current {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to attendance records for the current active class session.
     * @path /sessions/class-current/records/{userId}
     * @allow create if the user is signed in and the requested userId matches their authentication UID.
     * @allow read if the user is signed in or the user is an admin.
     * @allow update, delete if the user is an admin.
     * @deny create if the user is not signed in or the requested userId does not match their authentication UID.
     * @principle Enforces document ownership for attendance records, with admin overrides.
     */
    match /sessions/class-current/records/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to the current active hostel attendance session.
     * @path /sessions/hostel-current
     * @allow (get, list) if true, open to all users.
     * @allow (create, update, delete) if the user is an admin.
     * @deny (create, update, delete) if the user is not an admin.
     * @principle Restricts write access to admins for current attendance sessions.
     */
    match /sessions/hostel-current {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to attendance records for the current active hostel session.
     * @path /sessions/hostel-current/records/{userId}
     * @allow create if the user is signed in and the requested userId matches their authentication UID.
     * @allow read if the user is signed in or the user is an admin.
     * @allow update, delete if the user is an admin.
     * @deny create if the user is not signed in or the requested userId does not match their authentication UID.
     * @principle Enforces document ownership for attendance records, with admin overrides.
     */
    match /sessions/hostel-current/records/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to archived attendance sessions.
     * @path /sessions/{sessionId}
     * @allow (get, list) if true, open to all users.
     * @allow (create, update, delete) if the user is an admin.
     * @deny (create, update, delete) if the user is not an admin.
     * @principle Restricts write access to admins for archived attendance sessions.
     */
    match /sessions/{sessionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to attendance records for a specific historical session.
     * @path /sessions/{sessionId}/records/{recordId}
     * @allow (get, list) if the user is an admin.
     * @deny (get, list) if the user is not an admin.
     * @allow (create, update, delete) if the user is an admin.
     * @deny (create, update, delete) if the user is not an admin.
     * @principle Restricts access to admins for historical attendance records.
     */
    match /sessions/{sessionId}/records/{recordId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to chat messages for a specific student.
     * @path /chats/{studentUid}/messages/{messageId}
     * @allow (get, list) if the user is an admin or the student UID matches the authentication UID.
     * @deny (get, list) if the user is not an admin and the student UID does not match the authentication UID.
     * @allow (create) if the user is an admin or the student UID matches the authentication UID.
     * @allow (update, delete) if false, no one can update or delete a message
     * @principle Restricts access to admins and the specific student involved in the chat.
     */
    match /chats/{studentUid}/messages/{messageId} {
      allow get: if isSignedIn() && (isAdmin() || isOwner(studentUid));
      allow list: if isSignedIn() && (isAdmin() || isOwner(studentUid));
      allow create: if isSignedIn() && (isAdmin() || isOwner(studentUid));
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to application-wide settings.
     * @path /settings/attendance
     * @allow (get, list) if the user is an admin.
     * @deny (get, list) if the user is not an admin.
     * @allow (create, update, delete) if the user is an admin.
     * @deny (create, update, delete) if the user is not an admin.
     * @principle Restricts access to admins for application settings.
     */
    match /settings/attendance {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return request.auth.uid == userId && resource != null;
  }

  function isAdmin() {
    return request.auth.token.role == 'admin';
  }
}