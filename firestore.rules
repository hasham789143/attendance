/**
 * @fileoverview Firestore Security Rules for the attendance tracking system.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model, where 'admin' users have elevated privileges and regular users primarily access their own data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with 'userId' matching the Firebase Auth UID.
 * - /sessions/class-current: Stores the current active class attendance session (single document).
 * - /sessions/class-current/records/{userId}: Stores live attendance records for the current class session.
 * - /sessions/hostel-current: Stores the current active hostel attendance session (single document).
 * - /sessions/hostel-current/records/{userId}: Stores live attendance records for the current hostel session.
 * - /sessions/{sessionId}: Stores archived attendance sessions.
 * - /sessions/{sessionId}/records/{recordId}: Stores individual attendance records for historical sessions.
 * - /chats/{studentUid}/messages/{messageId}: Stores chat messages for specific students.
 * - /settings/attendance: Stores application-wide settings (single document with ID 'attendance').
 *
 * Key Security Decisions:
 * - Admins can list all users.
 * - User listing is generally disallowed except for admins.
 * - All writes require authentication.
 * - Data validation is relaxed for prototyping, focusing on authorization and relational integrity.
 *
 * Denormalization for Authorization:
 *  - User roles are stored directly in the /users/{userId} document, enabling role-based access control without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (read, write): Authenticated user with matching UID.
     * @deny (read, write): Authenticated user with non-matching UID.
     * @deny (read): Unauthenticated user.
     * @principle Enforces document ownership and admin overrides.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if isAdmin();
      allow create: if isSignedIn() && isOwner(userId) ;
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to the current class attendance session (single document).
     * @path /sessions/class-current
     * @allow (read): Any authenticated user.
     * @allow (write): Only admins.
     * @deny (read, write): Unauthenticated user.
     * @principle Restricts write access to admins.
     */
    match /sessions/class-current {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to live attendance records for the current class session.
     * @path /sessions/class-current/records/{userId}
     * @allow (read): Any authenticated user.
     * @allow (write): Only admins.
     * @deny (read, write): Unauthenticated user.
     * @principle Restricts write access to admins.
     */
    match /sessions/class-current/records/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

     /**
     * @description Controls access to the current hostel attendance session (single document).
     * @path /sessions/hostel-current
     * @allow (read): Any authenticated user.
     * @allow (write): Only admins.
     * @deny (read, write): Unauthenticated user.
     * @principle Restricts write access to admins.
     */
    match /sessions/hostel-current {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to live attendance records for the current hostel session.
     * @path /sessions/hostel-current/records/{userId}
     * @allow (read): Any authenticated user.
     * @allow (write): Only admins.
     * @deny (read, write): Unauthenticated user.
     * @principle Restricts write access to admins.
     */
    match /sessions/hostel-current/records/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to archived attendance sessions.
     * @path /sessions/{sessionId}
     * @allow (read): Any authenticated user.
     * @allow (write): Only admins.
     * @deny (read, write): Unauthenticated user.
     * @principle Restricts write access to admins.
     */
    match /sessions/{sessionId} {
      allow get: if isSignedIn() || isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to individual attendance records for historical sessions.
     * @path /sessions/{sessionId}/records/{recordId}
     * @allow (read): Any authenticated user.
     * @allow (write): Only admins.
     * @deny (read, write): Unauthenticated user.
     * @principle Restricts write access to admins.
     */
    match /sessions/{sessionId}/records/{recordId} {
      allow get: if isSignedIn() || isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to chat messages for a specific student.
     * @path /chats/{studentUid}/messages/{messageId}
     * @allow (read, create): Owner and admins
     * @allow (write): Admins only.
     * @deny (read, write): Unauthenticated user.
     * @principle Restricts write access to admins and enforces ownership for reads.
     */
    match /chats/{studentUid}/messages/{messageId} {
      allow get: if isSignedIn() && (isOwner(studentUid) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && (isOwner(studentUid) || isAdmin());
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

     /**
     * @description Controls access to application-wide settings.
     * @path /settings/attendance
     * @allow (read): Any authenticated user.
     * @allow (write): Only admins.
     * @deny (read, write): Unauthenticated user.
     * @principle Restricts write access to admins.
     */
    match /settings/attendance {
        allow get: if isSignedIn() || isAdmin();
        allow list: if false;
        allow create: if isSignedIn() && isAdmin();
        allow update: if isSignedIn() && isAdmin();
        allow delete: if isSignedIn() && isAdmin();
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isAdmin() {
    return isSignedIn() && request.auth.token.role == 'admin';
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}