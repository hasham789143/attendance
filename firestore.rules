/**
 * @fileoverview Firestore Security Rules for Attendance Tracking System
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control.
 * Users can only manage their own profile data. Attendance sessions are managed by admins.
 * Attendance records can be created by anyone, but we do not enforce this.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, secured by owner-only access.
 * - /sessions/current: Stores the current active attendance session, write access restricted to admins.
 * - /attendance/{attendanceId}: Stores individual attendance records, writable by anyone for now.
 * - /settings/attendance: Stores application-wide settings, write access restricted to admins.
 *
 * Key Security Decisions:
 * - Users cannot list all users.
 * - The 'sessions' collection is a singleton; write access is limited to admins.
 * - The 'attendance' collection does not enforce write access as of now.
 *
 * Denormalization for Authorization:
 *  - AttendanceSession: The 'adminUid' field is used to identify the admin who created the session, enabling owner-based write rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants owner-only access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with uid 'user_abc' can create their profile with matching userId.
     * @allow (get) User with uid 'user_abc' can read their profile.
     * @allow (update) User with uid 'user_abc' can update their profile.
     * @allow (delete) User with uid 'user_abc' can delete their profile.
     * @deny (create) User with uid 'user_xyz' cannot create a profile for userId 'user_abc'.
     * @deny (update) User with uid 'user_xyz' cannot update the profile of userId 'user_abc'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
          return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages the current attendance session, accessible only to admins.
     * @path /sessions/current
     * @allow (get) Any signed-in user can get the current session.
     * @allow (create) Only an admin can create a new session with their UID in adminUid.
     * @allow (update) Only the admin who created the session can update it.
     * @allow (delete) Only the admin who created the session can delete it.
     * @deny (create) A non-admin user cannot create a session.
     * @deny (update) A non-admin user cannot update the session.
     * @principle Enforces role-based access control for session management.
     */
    match /sessions/{sessionId} {
      function isAdmin() {
          return request.auth.token.role == 'admin';
      }
      function isSignedIn() {
          return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Stores attendance records; currently allows anyone to create records.
     * @path /attendance/{attendanceId}
     * @allow (get) Anyone can get an attendance record.
     * @allow (create) Anyone can create an attendance record.
     * @allow (update) Anyone can update an attendance record.
     * @allow (delete) Anyone can delete an attendance record.
     * @principle Currently allows public access to attendance records for prototyping.
     */
    match /attendance/{attendanceId} {
      function isSignedIn() {
          return request.auth != null;
      }
      allow get: if true;
      allow list: if false;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

     /**
      * @description Manages application settings, accessible only to admins.
      * @path /settings/attendance
      * @allow (get) Any signed-in user can read the settings.
      * @allow (create) Only an admin can create or overwrite the settings.
      * @allow (update) Only an admin can update the settings.
      * @allow (delete) Only an admin can delete the settings.
      * @deny (create) A non-admin user cannot create or overwrite the settings.
      * @deny (update) A non-admin user cannot update the settings.
      * @principle Enforces role-based access control for settings management.
      */
    match /settings/{settingsId} {
      function isAdmin() {
          return request.auth.token.role == 'admin';
      }
      function isSignedIn() {
          return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
  }
}