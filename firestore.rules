/**
 * @file Firebase Security Rules for Attendance Tracking System
 *
 * @core_philosophy This ruleset enforces a user-ownership model for user profiles and restricts access to attendance data based on authentication.
 *   It allows public read access to class data, but only authenticated users can manage attendance records.
 *   Chat messages are secured to allow admins to read all messages, but students can only read their own.
 *   It allows full read and write access to attendance collection for authenticated users.
 *
 * @data_structure
 *   - /users/{userId}: Stores user profiles, where {userId} matches the Firebase Auth UID.
 *   - /sessions/class-current: Stores the current class attendance session (single document).
 *   - /sessions/class-current/records/{userId}: Stores live attendance records for the current class session.
 *   - /sessions/hostel-current: Stores the current hostel attendance session (single document).
 *   - /sessions/hostel-current/records/{userId}: Stores live attendance records for the current hostel session.
 *   - /sessions/{sessionId}: Stores archived attendance sessions.
 *   - /sessions/{sessionId}/records/{recordId}: Stores individual attendance records for a specific historical session.
 *   - /chats/{studentUid}/messages/{messageId}: Stores chat messages for a specific student.
 *   - /settings/attendance: Stores application-wide settings (single document with id 'attendance').
 *
 * @key_security_decisions
 *   - User listing is implicitly denied.
 *   - Ambiguous relationships default to strict owner-only access.
 *   - Settings document is only writable by those with "admin" role.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows authenticated users to read and write their own user profile data.
     * @path /users/{userId}
     * @allow (read, write) if request.auth.uid == 'user_abc'
     * @deny (read, write) if request.auth.uid != 'user_abc'
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is not allowed

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows authenticated users to read and write attendance data.
     * @path /attendance/{document=**}
     * @allow (read, write) if request.auth != null
     * @deny No specific deny conditions, authenticated users have full access.
     * @principle Allows full read and write access to attendance collection for authenticated users.
     */
    match /attendance/{document=**} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows authenticated users to read class data.
     * @path /classes/{document=**}
     * @allow (read) if request.auth != null
     * @deny No specific deny conditions, all authenticated users can read class data.
     * @principle Allows public read access to class data for all authenticated users.
     */
    match /classes/{document=**} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read current class attendance session, but only admins to write.
     * @path /sessions/class-current
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Restricts writing new attendance sessions to admins only.
     */
    match /sessions/class-current {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows anyone to read current hostel attendance session, but only admins to write.
     * @path /sessions/hostel-current
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Restricts writing new attendance sessions to admins only.
     */
    match /sessions/hostel-current {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

    /**
     * @description Allows anyone to read the attendance record. The create, update, and delete is only allowed for admin.
     * @path /sessions/class-current/records/{userId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Read records publicly, but restrict record modification to admins.
     */
    match /sessions/class-current/records/{userId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }

      /**
     * @description Allows anyone to read the attendance record. The create, update, and delete is only allowed for admin.
     * @path /sessions/hostel-current/records/{userId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Read records publicly, but restrict record modification to admins.
     */
    match /sessions/hostel-current/records/{userId} {
        allow get, list: if true;
        allow create, update, delete: if isAdmin();
    }


    /**
     * @description Allows access to individual archived sessions.
     * @path /sessions/{sessionId}
     */
    match /sessions/{sessionId} {
      allow get: if isSignedIn();
      allow list: if false; // Listing is not allowed

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows access to individual archived session records.
     * @path /sessions/{sessionId}/records/{recordId}
     */
    match /sessions/{sessionId}/records/{recordId} {
      allow get: if isSignedIn();
      allow list: if false; // Listing is not allowed

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

     /**
     * @description Allows admins to read all chat messages, and students to read their own.
     * @path /chats/{studentUid}/messages/{messageId}
     * @allow (get, list) if isAdmin() || (isSignedIn() && isOwner(studentUid))
     * @deny (get, list) if !isAdmin() && !(isSignedIn() && isOwner(studentUid))
     */
    match /chats/{studentUid}/messages/{messageId} {
      allow get, list: if isAdmin() || (isSignedIn() && isOwner(studentUid));

      allow create: if isSignedIn();
      allow update: if false; // Messages are not editable
      allow delete: if false; // Messages cannot be deleted
    }

    /**
     * @description Allows admins to read and write application-wide settings.
     * @path /settings/attendance
     * @allow (get) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     */
    match /settings/attendance {
      allow get: if true;
      allow list: if false;

      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

    function isAdmin() {
    return isSignedIn() && request.auth.token.role == 'admin';
  }
}