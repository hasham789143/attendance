/**
 * @fileoverview Firestore Security Rules for the attendance tracking system.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access by enforcing strict ownership for user profiles
 * and administrative control over attendance sessions. Data validation is relaxed to facilitate rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, with 'userId' matching the Firebase Auth UID.
 * - /sessions/current: Stores the currently active attendance session.
 * - /attendance/{attendanceId}: Stores individual attendance records.
 * - /settings/attendance: Stores application-wide settings in a single document.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Only the owner can read/write their own profile.
 * - Attendance sessions can only be created by admins, and attendance records are public.
 *
 * Denormalization for Authorization:
 * - The `AttendanceSession` includes an `adminUid` field to simplify admin ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile information.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' creates their profile at /users/user123.
     * @allow (get, update, delete) - User with UID 'user123' accesses their profile at /users/user123.
     * @deny (create) - User with UID 'user456' attempts to create a profile for user 'user123' at /users/user123.
     * @deny (get, update, delete) - User with UID 'user456' attempts to access the profile of user 'user123' at /users/user123.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages the current attendance session.
     * @path /sessions/current
     * @allow (create) - Admin with UID 'admin123' creates a new session.
     * @allow (get) - Any user can get the current session
     * @deny (create, update, delete) - Non-admin attempts to create a new session.
     * @principle Requires admin authentication to create sessions.
     */
    match /sessions/current {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages individual attendance records.
     * @path /attendance/{attendanceId}
     * @allow (create) - Any authenticated user can create an attendance record.
     * @allow (get, list) - Any user can read attendance records.
     * @deny (update, delete) - Only admins can update or delete attendance records.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /attendance/{attendanceId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages application-wide settings.
     * @path /settings/attendance
     * @allow (get) - Any user can read the settings.
     * @deny (create, update, delete) - Only admins can change settings.
     * @principle Allows public read access but restricts write access to admins.
     */
    match /settings/attendance {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  function isAdmin() {
    return request.auth.token.role == 'admin';
  }
}