/**
 * @fileoverview Firestore Security Rules for Attendance Tracking System
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model with ownership constraints where appropriate.
 * Admins have broad access, while viewers have read-only access. Users can only manage their own data.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the user themselves and admins.
 * - /sessions/*: Attendance session data, with access control based on the session type (class or hostel) and user role.
 * - /chats/{studentUid}/messages/{messageId}: Chat messages, accessible to admins and the specific student.
 * - /settings/attendance: Application-wide settings, writable only by admins.
 *
 * Key Security Decisions:
 * - Users can only create their own user documents (self-registration).
 * - Listing of users is disallowed for non-admins.
 * - Attendance records are associated with users and sessions, with access control enforced at both levels.
 * - Chats are private between admins and individual students.
 *
 * Denormalization for Authorization:
 * - AttendanceSession documents contain the adminUid of the session creator, allowing rules to quickly check ownership.
 *
 * Structural Segregation:
 * - Current and historical attendance sessions are stored in separate collections for performance and security.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description: Secure user profiles. Users can only read/write their own profile. Admins can read all profiles.
     * @path: /users/{userId}
     * @allow: User (create) - Authenticated user creates their profile.
     * @allow: User (get, update, delete) - Authenticated user accesses their own profile.
     * @allow: Admin (get, list) - Admin reads any user profile.
     * @deny: User (update, delete) - User tries to update/delete another user's profile.
     * @deny: Non-Admin (list) - Non-admin tries to list all users.
     * @principle: Enforces user ownership for profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow get: if isSignedIn() && isOwner(userId) || isAdmin();
      allow list: if isAdmin();
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description: Secure the current class attendance session.  Only admins can create, read, update, or delete the current session.
     * @path: /sessions/class-current
     * @allow: Admin (create, get, update, delete) - Admin manages the current session.
     * @deny: Non-Admin (create, get, update, delete) - Non-admin tries to manage the current session.
     * @principle: Restricts access to the current class session to admins.
     */
    match /sessions/class-current {
       function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      allow create: if isAdmin();
      allow get: if isAdmin();
      allow list: if false;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description: Secure live attendance records for the current class session. Only admins can read, create, update, or delete records.
     * @path: /sessions/class-current/records/{userId}
     * @allow: Admin (create, get, update, delete) - Admin manages attendance records.
     * @deny: Non-Admin (create, get, update, delete) - Non-admin tries to manage attendance records.
     * @principle: Restricts access to attendance records to admins.
     */
    match /sessions/class-current/records/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      allow create: if isAdmin();
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
     * @description: Secure the current hostel attendance session.  Only admins can create, read, update, or delete the current session.
     * @path: /sessions/hostel-current
     * @allow: Admin (create, get, update, delete) - Admin manages the current session.
     * @deny: Non-Admin (create, get, update, delete) - Non-admin tries to manage the current session.
     * @principle: Restricts access to the current hostel session to admins.
     */
    match /sessions/hostel-current {
       function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      allow create: if isAdmin();
      allow get: if isAdmin();
      allow list: if false;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description: Secure live attendance records for the current hostel session. Only admins can read, create, update, or delete records.
     * @path: /sessions/hostel-current/records/{userId}
     * @allow: Admin (create, get, update, delete) - Admin manages attendance records.
     * @deny: Non-Admin (create, get, update, delete) - Non-admin tries to manage attendance records.
     * @principle: Restricts access to attendance records to admins.
     */
    match /sessions/hostel-current/records/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      allow create: if isAdmin();
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description: Secure archived attendance sessions. Only admins can read session data.
     * @path: /sessions/{sessionId}
     * @allow: Admin (get) - Admin reads archived session data.
     * @deny: Non-Admin (get) - Non-admin tries to read archived session data.
     * @principle: Restricts access to archived sessions to admins.
     */
    match /sessions/{sessionId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      allow create: if false;
      allow get: if isAdmin();
      allow list: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description: Secure individual attendance records for historical sessions. Only admins can read record data.
     * @path: /sessions/{sessionId}/records/{recordId}
     * @allow: Admin (get) - Admin reads archived attendance records.
     * @deny: Non-Admin (get) - Non-admin tries to read archived attendance records.
     * @principle: Restricts access to historical attendance records to admins.
     */
    match /sessions/{sessionId}/records/{recordId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      allow create: if false;
      allow get: if isAdmin();
      allow list: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description: Secure chat messages.  Students can only read/write their own messages. Admins can read all chats.
     * @path: /chats/{studentUid}/messages/{messageId}
     * @allow: User (create, get, list) - Authenticated user accesses their own chat messages.
     * @allow: Admin (get, list) - Admin reads any user's chat messages.
     * @deny: User (update, delete) - Users cannot update or delete messages.
     * @deny: User (get, list) - User tries to read another user's chat messages.
     * @principle: Enforces user ownership for chat data.
     */
    match /chats/{studentUid}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(studentUid) {
        return request.auth.uid == studentUid;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      allow create: if isSignedIn() && (isOwner(studentUid) || isAdmin());
      allow get: if isSignedIn() && (isOwner(studentUid) || isAdmin());
      allow list: if isSignedIn() && (isOwner(studentUid) || isAdmin());
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description: Secure application-wide settings. Only admins can modify these settings.
     * @path: /settings/attendance
     * @allow: Admin (update) - Admin modifies application settings.
     * @deny: Non-Admin (update) - Non-admin tries to modify settings.
     * @principle: Restricts settings modifications to admins.
     */
    match /settings/attendance {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }
        allow create: if false;
        allow get: if isAdmin();
        allow list: if false;
        allow update: if isAdmin();
        allow delete: if false;
    }
  }
}