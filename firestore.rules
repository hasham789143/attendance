/**
 * @fileoverview Firestore Security Rules for Attendance Tracking System
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control.
 * Users can only manage their own data, while admins have broader access.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.  Each user can only access their own profile.
 * - /sessions/class-current: Stores the current active class attendance session (single document).
 * - /sessions/class-current/records/{userId}: Stores live attendance records for the current class session. Only admins can modify.
 * - /sessions/hostel-current: Stores the current active hostel attendance session (single document).
 * - /sessions/hostel-current/records/{userId}: Stores live attendance records for the current hostel session. Only admins can modify.
 * - /sessions/{sessionId}: Stores archived attendance sessions.
 * - /sessions/{sessionId}/records/{recordId}: Stores individual attendance records for a specific historical session.
 * - /chats/{studentUid}/messages/{messageId}: Stores chat messages for a specific student. Admins can access all chats.
 * - /settings/attendance: Stores application-wide settings. Only admins can modify.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Admins can read all chat messages.
 * - Data validation is minimized in this prototyping phase.
 *
 * Denormalization for Authorization:
 *  - The `AttendanceRecord` includes the `student` object, which contains the student's UID. This allows for easy ownership checks without additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles. Users can only read/write their own profile.
     * @path /users/{userId}
     * @allow (create, update, delete) if request.auth.uid == userId
     * @allow (get, list) if request.auth.uid == userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @deny (get, list) if request.auth.uid != userId
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures the current class attendance session. Only admins can create, update, or delete. Anyone can read.
     * @path /sessions/class-current
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Enforces admin-only writes.
     */
    match /sessions/class-current {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Secures live attendance records for the current class session. Only admins can create, update, or delete.
     * @path /sessions/class-current/records/{userId}
     * @allow (get, list) if isAdmin()
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Enforces admin-only writes.
     */
    match /sessions/class-current/records/{userId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
     * @description Secures the current hostel attendance session. Only admins can create, update, or delete. Anyone can read.
     * @path /sessions/hostel-current
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Enforces admin-only writes.
     */
    match /sessions/hostel-current {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Secures live attendance records for the current hostel session. Only admins can create, update, or delete.
     * @path /sessions/hostel-current/records/{userId}
     * @allow (get, list) if isAdmin()
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Enforces admin-only writes.
     */
    match /sessions/hostel-current/records/{userId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Secures archived attendance sessions. Only admins can create, update, or delete. Anyone can read.
     * @path /sessions/{sessionId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Enforces admin-only writes.
     */
    match /sessions/{sessionId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Secures individual attendance records for a specific historical session. Only admins can create, update, or delete. Anyone can read.
     * @path /sessions/{sessionId}/records/{recordId}
     * @allow (get, list) if isAdmin()
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Enforces admin-only writes.
     */
    match /sessions/{sessionId}/records/{recordId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Secures chat messages for a specific student. Admins can read all chats. Students can only read/write their own chats.
     * @path /chats/{studentUid}/messages/{messageId}
     * @allow (get, list) if isAdmin() || isOwner(studentUid)
     * @allow (create) if isAdmin() || isOwner(studentUid)
     * @allow (update, delete) if false; // No updates or deletes of chat messages.
     * @deny (update, delete) if true
     * @principle Restricts access to a user's own data tree.
     */
    match /chats/{studentUid}/messages/{messageId} {
      allow get, list: if isAdmin() || isOwner(studentUid);
      allow create: if isAdmin() || isOwner(studentUid);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures application-wide settings. Only admins can read and write.
     * @path /settings/attendance
     * @allow (get, list) if isAdmin()
     * @allow (create, update, delete) if isAdmin()
     * @deny (create, update, delete) if !isAdmin()
     * @principle Enforces admin-only access to settings.
     */
    match /settings/attendance {
      allow get: if isAdmin();
      allow list: if false; // Only a single document exists.  Listing should be disabled.
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    //------------------- Helper functions ----------------------

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'admin';
    }
  }
}