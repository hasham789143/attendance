/**
 * @fileoverview Firestore Security Rules for Attendance Tracking System
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model. Admins have broad access,
 * while other users (students/residents) have limited access, primarily to their own data.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, with 'userId' matching the Firebase Auth UID.
 * - /sessions/class-current: The currently active class session (single document).
 * - /sessions/class-current/records/{userId}: Live attendance records for the class session.
 * - /sessions/hostel-current: The currently active hostel session (single document).
 * - /sessions/hostel-current/records/{userId}: Live attendance records for the hostel session.
 * - /sessions/{sessionId}: Archived attendance sessions.
 * - /sessions/{sessionId}/records/{recordId}: Attendance records for archived sessions.
 * - /chats/{studentUid}/messages/{messageId}: Chat messages for a specific student.
 * - /settings/attendance: Application-wide settings (single document).
 *
 * Key Security Decisions:
 * - Users can only read/write their own user profile data.
 * - Only admins can create, update, or delete attendance sessions.
 * - Students/residents can only create attendance records under specific conditions (active session, valid key). The logic for this creation is handled on the client.
 * - Users cannot list other users, sessions, or records.
 * - Chat access is restricted to admins (all chats) and the specific student (their own chat).
 * - Settings can only be read and written by admins.
 *
 * Denormalization for Authorization:
 *  The rules use the `adminUid` field on the `AttendanceSession` document to authorize updates to that document.
 *  The rules use the `senderUid` on the `ChatMessage` to authorize access to the chat messages.
 *  The rules use the document id `userId` to authorize access to user documents
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile documents.
     * @path /users/{userId}
     * @allow (get, list): if isOwner(userId)
     * @allow (create): if isOwner(userId)
     * @allow (update): if isExistingOwner(userId)
     * @allow (delete): if isExistingOwner(userId)
     * @deny (create): if !isOwner(userId)
     * @deny (update): if !isOwner(userId)
     * @deny (delete): if !isOwner(userId)
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      // Only signed-in users can access their own user document.
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to the current class attendance session document.
     * @path /sessions/class-current
     * @allow (get, list): if true
     * @allow (create): if isAdmin()
     * @allow (update): if isAdmin()
     * @allow (delete): if isAdmin()
     * @deny (create): if !isAdmin()
     * @deny (update): if !isAdmin()
     * @deny (delete): if !isAdmin()
     * @principle Restricts session management to admins. Allows public reads.
     */
    match /sessions/class-current {
      // Only admins can create, update, or delete the current class session. Everyone can read.
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() ;
      allow delete: if isAdmin();
    }

    /**
     * @description Grants access to attendance records for the current class session.
     * @path /sessions/class-current/records/{userId}
     * @allow (get, list): if isAdmin() || isOwner(userId)
     * @allow (create): if isSignedIn()
     * @allow (update): if false
     * @allow (delete): if false
     * @deny (get): if !isAdmin() && !isOwner(userId)
     * @deny (list): if !isAdmin() && !isOwner(userId)
     * @deny (update): if true
     * @deny (delete): if true
     * @principle Restricts creation of records to signed-in users.
     */
    match /sessions/class-current/records/{userId} {
      // Only admins can read live records, students can only read their own.  Students create records.
      allow get, list: if isAdmin() || isOwner(userId);
      allow create: if isSignedIn(); // Clients handle logic for record creation based on session key.
      allow update, delete: if false; // Updates and deletes are not allowed.
    }

   /**
     * @description Grants access to the current hostel attendance session document.
     * @path /sessions/hostel-current
     * @allow (get, list): if true
     * @allow (create): if isAdmin()
     * @allow (update): if isAdmin()
     * @allow (delete): if isAdmin()
     * @deny (create): if !isAdmin()
     * @deny (update): if !isAdmin()
     * @deny (delete): if !isAdmin()
     * @principle Restricts session management to admins. Allows public reads.
     */
    match /sessions/hostel-current {
      // Only admins can create, update, or delete the current class session. Everyone can read.
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() ;
      allow delete: if isAdmin();
    }

    /**
     * @description Grants access to attendance records for the current hostel session.
     * @path /sessions/hostel-current/records/{userId}
     * @allow (get, list): if isAdmin() || isOwner(userId)
     * @allow (create): if isSignedIn()
     * @allow (update): if false
     * @allow (delete): if false
     * @deny (get): if !isAdmin() && !isOwner(userId)
     * @deny (list): if !isAdmin() && !isOwner(userId)
     * @deny (update): if true
     * @deny (delete): if true
     * @principle Restricts creation of records to signed-in users.
     */
    match /sessions/hostel-current/records/{userId} {
      // Only admins can read live records, residents can only read their own.  Residents create records.
      allow get, list: if isAdmin() || isOwner(userId);
      allow create: if isSignedIn(); // Clients handle logic for record creation based on session key.
      allow update, delete: if false; // Updates and deletes are not allowed.
    }

    /**
     * @description Grants access to archived attendance sessions.
     * @path /sessions/{sessionId}
     * @allow (get, list): if isAdmin()
     * @allow (create): if isAdmin()
     * @allow (update): if isAdmin()
     * @allow (delete): if isAdmin()
     * @deny (get): if !isAdmin()
     * @deny (list): if !isAdmin()
     * @deny (create): if !isAdmin()
     * @deny (update): if !isAdmin()
     * @deny (delete): if !isAdmin()
     * @principle Restricts archived session management to admins.
     */
    match /sessions/{sessionId} {
      // Only admins can manage archived sessions.
      allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Grants access to attendance records for a specific historical session.
     * @path /sessions/{sessionId}/records/{recordId}
     * @allow (get, list): if isAdmin()
     * @allow (create): if false
     * @allow (update): if false
     * @allow (delete): if false
     * @deny (get): if !isAdmin()
     * @deny (list): if !isAdmin()
     * @deny (create): if true
     * @deny (update): if true
     * @deny (delete): if true
     * @principle Restricts access to historical records to admins.
     */
    match /sessions/{sessionId}/records/{recordId} {
      // Only admins can read historical attendance records.
      allow get, list: if isAdmin();
      allow create, update, delete: if false; // No creation, updates, or deletion.
    }

    /**
     * @description Grants access to chat messages for a specific student.
     * @path /chats/{studentUid}/messages/{messageId}
     * @allow (get, list): if isAdmin() || isOwner(studentUid)
     * @allow (create): if isAdmin() || isOwner(studentUid)
     * @allow (update): if false
     * @allow (delete): if false
     * @deny (get): if !isAdmin() && !isOwner(studentUid)
     * @deny (list): if !isAdmin() && !isOwner(studentUid)
     * @deny (create): if !isAdmin() && !isOwner(studentUid)
     * @deny (update): if true
     * @deny (delete): if true
     * @principle Allows admins access to all chats, and students to their own.
     */
    match /chats/{studentUid}/messages/{messageId} {
      // Admins can read all chats.  Students can only read their own chats.
      allow get, list, create: if isAdmin() || isOwner(studentUid);
      allow update, delete: if false;
    }

    /**
     * @description Grants access to application-wide settings.
     * @path /settings/attendance
     * @allow (get, list): if true
     * @allow (create): if isAdmin()
     * @allow (update): if isAdmin()
     * @allow (delete): if isAdmin()
     * @deny (create): if !isAdmin()
     * @deny (update): if !isAdmin()
     * @deny (delete): if !isAdmin()
     * @principle Restricts settings management to admins.
     */
    match /settings/attendance {
      // Only admins can manage settings. Everyone can read.
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
  }

  // Helper functions to determine access.
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  function isAdmin() {
    return request.auth.token.role == 'admin';
  }
}