/**
 * @fileoverview Firestore Security Rules for Attendance Tracking System
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles, restricts write access to attendance sessions and records,
 * and provides controlled access to application settings. The system is designed to prevent unauthorized data modification
 * while allowing public read access where appropriate.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, where {userId} matches the Firebase Auth UID.
 * - /sessions/current: Stores the data for the current active attendance session.
 * - /attendance/{attendanceId}: Stores individual attendance records.
 * - /settings/attendance: Stores application settings, with a single document identified by 'attendance'.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Only authenticated users can create attendance records.
 * - Listing all users is disallowed for privacy reasons.
 * - Read access to the current session is public.
 *
 * Denormalization for Authorization:
 *  N/A - No denormalization is used in this ruleset. The current schema supports the access patterns.
 * Structural Segregation:
 * N/A - No structural segregation is used in this ruleset.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the UID matches the document ID.
     * @allow (get, update, delete) Authenticated user can only access their own profile.
     * @deny (create) If the authenticated user's UID does not match the document ID.
     * @deny (list) Listing users is not allowed.
     * @deny (update, delete) If the user does not exist.
     * @principle Enforces document ownership for user profiles and prevents unauthorized listing.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to the current attendance session.
     * @path /sessions/current
     * @allow (get, list) Public read access to the current session.
     * @deny (create, update, delete) Only admins should manage the current session (TODO: Implement admin role check).
     * @principle Allows public reading of the active session while restricting write access.
     */
    match /sessions/current {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Controls access to individual attendance records.
     * @path /attendance/{attendanceId}
     * @allow (create) Authenticated users can create attendance records.
     * @allow (get) Any authenticated user can get a record
     * @deny (list, update, delete) Only admins should manage attendance records (TODO: Implement admin role check).
     * @principle Restricts management of attendance records to authorized personnel.
     */
    match /attendance/{attendanceId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Controls access to application settings.
     * @path /settings/attendance
     * @allow (get) Public read access to application settings.
     * @deny (create, update, delete) Only admins should manage application settings (TODO: Implement admin role check).
     * @principle Allows public reading of settings while restricting write access.
     */
    match /settings/attendance {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check
    }
  }
}