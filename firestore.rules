/**
 * @fileoverview Firestore Security Rules for Attendance Tracking System
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and an admin-controlled model for attendance sessions and records.
 * Only admins can create, update, or delete sessions and records. Users can only read data.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, where userId matches the Firebase Auth UID.
 * - /sessions/class-current: The currently active class attendance session (single document).
 * - /sessions/class-current/records/{userId}: Attendance records for the current class session.
 * - /sessions/hostel-current: The currently active hostel attendance session (single document).
 * - /sessions/hostel-current/records/{userId}: Attendance records for the current hostel session.
 * - /sessions/{sessionId}: Archived attendance sessions.
 * - /sessions/{sessionId}/records/{recordId}: Attendance records for historical sessions.
 * - /chats/{studentUid}/messages/{messageId}: Chat messages for a specific student.
 * - /settings/attendance: Application settings (single document with ID 'attendance').
 *
 * Key Security Decisions:
 * - Users can only read their own profile data.
 * - Only admins can create, update, or delete attendance sessions and records.
 * - Chats are private between students and admins. Students can only read their own chats, and admins can read all chats.
 * - Settings are readable by all, but only writable by admins.
 *
 * Denormalization for Authorization:
 *  N/A - Current design relies on role-based access control.
 *
 * Structural Segregation:
 *  Uses separate collections for current vs. archived sessions.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read their own profile data and admins to manage all user data.
     * @path /users/{userId}
     * @allow (get, list): If the request is made by the user whose ID matches the document ID.
     * @allow (create): If the user's UID matches the userId and the user doesn't exist.
     * @allow (update, delete): If the user is an admin and the userId is valid.
     * @deny (create): If the user's UID doesn't match the userId.
     * @principle Enforces document ownership for reads, admin-only for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
        return isSignedIn() && ('admin' in request.auth.token.claims);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && !exists(/databases/$(database)/documents/users/$(userId));
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows admins to manage the current class attendance session.
     * @path /sessions/class-current
     * @allow (get): If the user is an admin.
     * @allow (list): If false
     * @allow (create, update, delete): If the user is an admin.
     * @deny (create, update, delete): If the user is not an admin.
     * @principle Admin-only access for session management.
     */
    match /sessions/class-current {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Allows admins to manage attendance records for the current class session.
     * @path /sessions/class-current/records/{userId}
     * @allow (get): If the user is an admin.
     * @allow (list): If the user is an admin.
     * @allow (create, update, delete): If the user is an admin.
     * @deny (create, update, delete): If the user is not an admin.
     * @principle Admin-only access for attendance record management.
     */
    match /sessions/class-current/records/{userId} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Allows admins to manage the current hostel attendance session.
     * @path /sessions/hostel-current
     * @allow (get): If the user is an admin.
     * @allow (list): If false
     * @allow (create, update, delete): If the user is an admin.
     * @deny (create, update, delete): If the user is not an admin.
     * @principle Admin-only access for session management.
     */
    match /sessions/hostel-current {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Allows admins to manage attendance records for the current hostel session.
     * @path /sessions/hostel-current/records/{userId}
     * @allow (get): If the user is an admin.
     * @allow (list): If the user is an admin.
     * @allow (create, update, delete): If the user is an admin.
     * @deny (create, update, delete): If the user is not an admin.
     * @principle Admin-only access for attendance record management.
     */
    match /sessions/hostel-current/records/{userId} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Allows admins to manage archived attendance sessions.
     * @path /sessions/{sessionId}
     * @allow (get): If the user is an admin.
     * @allow (list): If the user is an admin.
     * @allow (create, update, delete): If the user is an admin.
     * @deny (create, update, delete): If the user is not an admin.
     * @principle Admin-only access for session management.
     */
    match /sessions/{sessionId} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Allows admins to manage attendance records for historical sessions.
     * @path /sessions/{sessionId}/records/{recordId}
     * @allow (get): If the user is an admin.
     * @allow (list): If the user is an admin.
     * @allow (create, update, delete): If the user is an admin.
     * @deny (create, update, delete): If the user is not an admin.
     * @principle Admin-only access for attendance record management.
     */
    match /sessions/{sessionId}/records/{recordId} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Allows students to read their own chat messages, and admins to manage all chat messages.
     * @path /chats/{studentUid}/messages/{messageId}
     * @allow (get, list): If the request is made by the student or an admin.
     * @allow (create): If the user is an admin.
     * @allow (update, delete): If the user is an admin.
     * @deny (create, update, delete): If the user is not an admin.
     * @principle Chat access control.
     */
    match /chats/{studentUid}/messages/{messageId} {
        allow get: if isOwner(studentUid) || isAdmin();
        allow list: if isOwner(studentUid) || isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Allows all users to read application settings, but only admins to modify them.
     * @path /settings/attendance
     * @allow (get): If true
     * @allow (list): If false
     * @allow (create, update, delete): If the user is an admin.
     * @deny (create, update, delete): If the user is not an admin.
     * @principle Public read, admin-only write for application settings.
     */
    match /settings/attendance {
        allow get: if true;
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }
  }
}