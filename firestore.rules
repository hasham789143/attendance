/**
 * @fileoverview Firestore Security Rules for Attendance Tracking System
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and an admin-controlled model for attendance sessions and records.
 * Only admins can create, update, or delete attendance sessions. Students can only create attendance records under active sessions.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Accessible only to the owner (the user themselves) for read/write.
 * - /sessions/class-current: Stores the currently active class attendance session.
 * - /sessions/class-current/records/{userId}: Stores attendance records for the active class session.
 * - /sessions/hostel-current: Stores the currently active hostel attendance session.
 * - /sessions/hostel-current/records/{userId}: Stores attendance records for the active hostel session.
 * - /sessions/{sessionId}: Stores archived attendance sessions.
 * - /sessions/{sessionId}/records/{recordId}: Stores attendance records for historical sessions.
 * - /chats/{studentUid}/messages/{messageId}: Stores chat messages for a specific student.
 * - /settings/attendance: Stores application-wide settings related to attendance.
 *
 * Key Security Decisions:
 * - Only admins can create or modify attendance sessions.
 * - Users can only create attendance records for themselves under active sessions.
 * - User listing is not allowed.
 * - Settings are read-only for non-admins.
 *
 * Denormalization for Authorization:
 * - Attendance records do not store admin UIDs. Authorization is handled via the session document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, update, delete) User with matching UID can access their own profile.
     * @allow (create) User can create their profile if the UID matches their auth UID.
     * @deny (get, update, delete) User cannot access another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows admins to read and write the current class attendance session.
     * @path /sessions/class-current
     * @allow (get) Any signed-in user can read the current class session.
     * @allow (create, update, delete) Only admins can manage class attendance sessions.
     * @deny (create, update, delete) Non-admins cannot manage class attendance sessions.
     * @principle Restricts session management to admins.
     */
    match /sessions/class-current {
      function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows students to create their own attendance records under the current class session.
     * @path /sessions/class-current/records/{userId}
     * @allow (create) Students can create their own attendance record if the UID matches their auth UID.
     * @deny (get, update, delete) No one can read, update, or delete attendance records directly.
     * @principle Restricts attendance record management.
     */
    match /sessions/class-current/records/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if false;
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if false;
      allow delete: if false;
    }

        /**
     * @description Allows admins to read and write the current hostel attendance session.
     * @path /sessions/hostel-current
     * @allow (get) Any signed-in user can read the current hostel session.
     * @allow (create, update, delete) Only admins can manage hostel attendance sessions.
     * @deny (create, update, delete) Non-admins cannot manage hostel attendance sessions.
     * @principle Restricts session management to admins.
     */
    match /sessions/hostel-current {
      function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows residents to create their own attendance records under the current hostel session.
     * @path /sessions/hostel-current/records/{userId}
     * @allow (create) Residents can create their own attendance record if the UID matches their auth UID.
     * @deny (get, update, delete) No one can read, update, or delete attendance records directly.
     * @principle Restricts attendance record management.
     */
    match /sessions/hostel-current/records/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if false;
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows admins to read and write archived attendance sessions.
     * @path /sessions/{sessionId}
     * @allow (get) Any signed-in user can read archived sessions.
     * @allow (create, update, delete) Only admins can manage archived attendance sessions.
     * @deny (create, update, delete) Non-admins cannot manage archived attendance sessions.
     * @principle Restricts archived session management to admins.
     */
    match /sessions/{sessionId} {
      function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows admins to read and write individual attendance records for a specific historical session.
     * @path /sessions/{sessionId}/records/{recordId}
     * @allow (get) Admins can read archived attendance records.
     * @allow (create, update, delete) Only admins can manage archived attendance records.
     * @deny (create, update, delete) Non-admins cannot manage archived attendance records.
     * @principle Restricts archived attendance record management to admins.
     */
    match /sessions/{sessionId}/records/{recordId} {
      function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows admins to read chat messages, and students to create their own chat messages.
     * @path /chats/{studentUid}/messages/{messageId}
     * @allow (get) Admins can read all chat messages.
     * @allow (create) Students can create chat messages for themselves.
     * @deny (update, delete) No one can update or delete chat messages.
     * @principle Restricts chat message creation to the owner.
     */
    match /chats/{studentUid}/messages/{messageId} {
      function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      function isOwner(studentUid) {
        return request.auth.uid == studentUid;
      }

      allow get: if isAdmin();
      allow list: if false;
      allow create: if isOwner(studentUid);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows admins to read and write application-wide settings, while others can only read.
     * @path /settings/attendance
     * @allow (get) Any signed-in user can read the settings.
     * @allow (update) Only admins can update the settings.
     * @deny (create, delete) No one can create or delete the settings document.
     * @principle Restricts settings modifications to admins.
     */
    match /settings/attendance {
      function isAdmin() {
        return request.auth.token.role == 'admin';
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if isAdmin();
      allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}