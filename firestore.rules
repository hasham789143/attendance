/**
 * @file Firebase Security Rules for Attendance Tracking System
 *
 * @core_philosophy This ruleset enforces a combination of user-ownership and role-based access control.
 *   - User profiles are private and only accessible to the owning user.
 *   - Attendance sessions and records have more complex logic:
 *     - Admins can create sessions.
 *     - Student can create attendance records on current sessions, subject to conditions (location).
 *   - Chat messages are private between student and admins
 *   - certain application-wide settings can be changed by admins.
 *
 * @data_structure
 *   - /users/{userId}: User profile data.
 *   - /sessions/class-current: Current active class attendance session (single document).
 *   - /sessions/class-current/records/{userId}: Live attendance records for the current class session.
 *   - /sessions/hostel-current: Current active hostel attendance session (single document).
 *   - /sessions/hostel-current/records/{userId}: Live attendance records for the current hostel session.
 *   - /sessions/{sessionId}: Archived attendance sessions.
 *   - /sessions/{sessionId}/records/{recordId}: Historical attendance records.
 *   - /chats/{studentUid}/messages/{messageId}: Chat messages for a specific student.
 *   - /settings/attendance: Application-wide settings (single document).
 *
 * @key_security_decisions
 *   - Users can only read/write their own profile data.
 *   - Admins have broader access to sessions and records.
 *   - Listing of users is disallowed.
 *   - Schema validation is relaxed to allow for rapid prototyping. Only relational integrity is validated.
 *
 * @denormalization_for_authorization
 *   - Attendance records do not denormalize the admin's UID.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (read, write) if request.auth.uid == userId
     * @deny (read, write) if request.auth.uid != userId
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      // Function to check if the requesting user is the owner of the document
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Function to check if the user exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

   /**
     * @description Controls access to current class attendance session.
     * @path /sessions/class-current
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @principle Allows public read access but restricts write access to admins only.
     */
    match /sessions/class-current {
       // Function to check if the requesting user is an admin
      function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to live attendance records for the current class session.
     * @path /sessions/class-current/records/{userId}
     * @allow create: if request.auth.uid == userId
     * @allow get, list: if isAdmin() || request.auth.uid == userId
     * @allow update, delete: if isAdmin()
     * @principle Restricts creation to the user, reads to the user or admin, and updates/deletes to admins only.
     */
    match /sessions/class-current/records/{userId} {
      // Function to check if the requesting user is an admin
      function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
      allow get: if isAdmin() || request.auth.uid == userId;
      allow list: if isAdmin();
      allow create: if request.auth.uid == userId;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
     * @description Controls access to current hostel attendance session.
     * @path /sessions/hostel-current
     * @allow (get, list) if true
     * @allow (create, update, delete) if isAdmin()
     * @principle Allows public read access but restricts write access to admins only.
     */
    match /sessions/hostel-current {
       // Function to check if the requesting user is an admin
      function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to live attendance records for the current hostel session.
     * @path /sessions/hostel-current/records/{userId}
     * @allow create: if request.auth.uid == userId
     * @allow get, list: if isAdmin() || request.auth.uid == userId
     * @allow update, delete: if isAdmin()
     * @principle Restricts creation to the user, reads to the user or admin, and updates/deletes to admins only.
     */
    match /sessions/hostel-current/records/{userId} {
      // Function to check if the requesting user is an admin
      function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
      allow get: if isAdmin() || request.auth.uid == userId;
      allow list: if isAdmin();
      allow create: if request.auth.uid == userId;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to archived attendance sessions.
     * @path /sessions/{sessionId}
     * @allow get, list: if isAdmin()
     * @allow create, update, delete: if isAdmin()
     * @principle Restricts all access to admins only.
     */
    match /sessions/{sessionId} {
      // Function to check if the requesting user is an admin
      function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to individual attendance records for a specific historical session.
     * @path /sessions/{sessionId}/records/{recordId}
     * @allow get, list: if isAdmin()
     * @allow create, update, delete: if isAdmin()
     * @principle Restricts all access to admins only.
     */
    match /sessions/{sessionId}/records/{recordId} {
      // Function to check if the requesting user is an admin
      function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to chat messages for a specific student.
     * @path /chats/{studentUid}/messages/{messageId}
     * @allow read: if isAdmin() || request.auth.uid == studentUid
     * @allow create: if request.auth.uid == studentUid
     * @allow update, delete: if false
     * @principle Restricts reads to the student or admin, creation to the student, and prohibits updates/deletes.
     */
    match /chats/{studentUid}/messages/{messageId} {
      // Function to check if the requesting user is an admin
      function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
      allow get: if isAdmin() || request.auth.uid == studentUid;
      allow list: if isAdmin() || request.auth.uid == studentUid;
      allow create: if request.auth.uid == studentUid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to application-wide settings.
     * @path /settings/attendance
     * @allow get: if true
     * @allow update: if isAdmin()
     */
      match /settings/attendance {
          // Function to check if the requesting user is an admin
          function isAdmin() {
            return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
          }
          allow get: if true;
          allow list: if false;
          allow create: if false;
          allow update: if isAdmin();
          allow delete: if false;
      }
  }
}