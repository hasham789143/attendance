/**
 * @fileoverview Firestore Security Rules for Attendance Tracking System
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model with ownership constraints where applicable.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, secured by owner-only access.
 * - /sessions/class-current: Single document for the currently active class session.
 * - /sessions/class-current/records/{userId}: Live attendance records for the current class session, secured by owner-only access and role.
 * - /sessions/hostel-current: Single document for the currently active hostel session.
 * - /sessions/hostel-current/records/{userId}: Live attendance records for the current hostel session, secured by owner-only access and role.
 * - /sessions/{sessionId}: Archived attendance sessions.
 * - /sessions/{sessionId}/records/{recordId}: Attendance records for historical sessions.
 * - /chats/{studentUid}/messages/{messageId}: Chat messages for a specific student. Admins can access all chats.
 * - /settings/attendance: Application-wide settings. Accessible by admins only.
 *
 * Key Security Decisions:
 * - User listing is disabled to prevent unauthorized data scraping.
 * - Ambiguous relationships default to the most secure interpretation (strict owner-only access).
 *
 * Denormalization for Authorization:
 *  N/A - all authorization uses `request.auth.uid` and admin role.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has the 'admin' role.
     */
    function isAdmin() {
      return isSignedIn() && (request.auth.token.role == 'admin');
    }

    /**
     * @description Restricts access to a user's own data tree.
     * @path /users/{userId}
     * @allow (create) User with uid 'user123' creates their profile.
     * @deny (create) User with uid 'user123' attempts to create a profile for 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages the current class attendance session document.
     * @path /sessions/class-current
     * @allow (get) Any authenticated user can read the current class session.
     * @deny (create) Non-admin user attempts to create the current class session.
     * @principle Requires admin role for write operations.
     */
    match /sessions/class-current {
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages live attendance records for the current class session.
     * @path /sessions/class-current/records/{userId}
     * @allow (create) Any authenitcated user can create the attendance record.
     * @deny (create) Non-admin user attempts to create the attendance record.
     */
    match /sessions/class-current/records/{userId} {
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if false;
    }

      /**
     * @description Manages the current hostel attendance session document.
     * @path /sessions/hostel-current
     * @allow (get) Any authenticated user can read the current hostel session.
     * @deny (create) Non-admin user attempts to create the current hostel session.
     * @principle Requires admin role for write operations.
     */
    match /sessions/hostel-current {
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages live attendance records for the current hostel session.
     * @path /sessions/hostel-current/records/{userId}
     * @allow (create) Any authenitcated user can create the attendance record.
     * @deny (create) Non-admin user attempts to create the attendance record.
     */
    match /sessions/hostel-current/records/{userId} {
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if false;
    }

    /**
     * @description Manages archived attendance sessions.
     * @path /sessions/{sessionId}
     */
    match /sessions/{sessionId} {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages individual attendance records for a specific historical session.
     * @path /sessions/{sessionId}/records/{recordId}
     */
    match /sessions/{sessionId}/records/{recordId} {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Stores chat messages for a specific student. Admins can access all chats.
     * @path /chats/{studentUid}/messages/{messageId}
     * @allow (create) An admin can create a message in any student's chat.
     * @deny (create) A non-admin user attempts to create a message in another student's chat.
     * @principle Role-based access control for chat messages.
     */
    match /chats/{studentUid}/messages/{messageId} {
      allow get: if isAdmin() || isOwner(studentUid);
      allow list: if false;
      allow create: if isAdmin() || isOwner(studentUid);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Stores application-wide settings. There is only one document with id 'attendance' in this collection.
     * @path /settings/attendance
     * @allow (get) Admins can read settings.
     * @deny (get) Non-admin users cannot access settings.
     * @principle Role-based access control for settings.
     */
    match /settings/attendance {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}