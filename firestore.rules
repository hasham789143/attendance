/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with ownership constraints.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the owner (the user themselves) and admins.
 * - /sessions/class-current: Stores the current active class attendance session. Accessible to admins only.
 * - /sessions/class-current/records/{userId}: Stores the live attendance records for each student in the currently active class session. Accessible to admins only.
 * - /sessions/hostel-current: Stores the current active hostel attendance session. Accessible to admins only.
 * - /sessions/hostel-current/records/{userId}: Stores the live attendance records for each resident in the currently active hostel session. Accessible to admins only.
 * - /sessions/{sessionId}: Stores archived attendance sessions. Accessible to admins only.
 * - /sessions/{sessionId}/records/{recordId}: Stores individual attendance records for a specific historical session. Accessible to admins only.
 * - /chats/{studentUid}/messages/{messageId}: Stores chat messages for a specific student. Accessible to admins and the student.
 * - /settings/attendance: Application-wide settings, accessible to admins only.
 *
 * Key Security Decisions:
 * - Strict role-based access control is enforced using the `isAdmin()` helper function.
 * - User listing is implicitly denied.
 * - Ambiguous relationships default to strict owner-only access or admin-only access.
 *
 * Denormalization for Authorization:
 * - The `User` entity includes a `role` field, which is used to determine admin status without requiring extra reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (get) User with matching UID can read their own profile.
     * @allow (create, update, delete) User with matching UID can create, update, or delete their own profile. Admin can create, update, delete any user profile.
     * @deny (get) User cannot read other user's profiles.
     * @deny (list) Listing all users is not allowed.
     * @principle Enforces document ownership for writes, role-based access for admins.
     */
    match /users/{userId} {
      // Anyone can read a user document.
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin()) && resource.data.uid == userId;
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin()) && resource.data.uid == userId;
    }

    /**
     * @description Controls access to the current class attendance session.
     * @path /sessions/class-current
     * @allow (get, create, update, delete) Only admins can manage the current class session.
     * @deny (get, create, update, delete) Non-admins cannot access or modify the current class session.
     * @principle Enforces role-based access control for admins.
     */
    match /sessions/class-current {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to the live attendance records for the current class session.
     * @path /sessions/class-current/records/{userId}
     * @allow (get, create, update, delete) Only admins can manage the attendance records.
     * @deny (get, create, update, delete) Non-admins cannot access or modify attendance records.
     * @principle Enforces role-based access control for admins.
     */
    match /sessions/class-current/records/{userId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

       /**
     * @description Controls access to the current hostel attendance session.
     * @path /sessions/hostel-current
     * @allow (get, create, update, delete) Only admins can manage the current hostel session.
     * @deny (get, create, update, delete) Non-admins cannot access or modify the current hostel session.
     * @principle Enforces role-based access control for admins.
     */
    match /sessions/hostel-current {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to the live attendance records for the current hostel session.
     * @path /sessions/hostel-current/records/{userId}
     * @allow (get, create, update, delete) Only admins can manage the attendance records.
     * @deny (get, create, update, delete) Non-admins cannot access or modify attendance records.
     * @principle Enforces role-based access control for admins.
     */
    match /sessions/hostel-current/records/{userId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }


    /**
     * @description Controls access to archived attendance sessions.
     * @path /sessions/{sessionId}
     * @allow (get, create, update, delete) Only admins can manage archived sessions.
     * @deny (get, create, update, delete) Non-admins cannot access or modify archived sessions.
     * @principle Enforces role-based access control for admins.
     */
    match /sessions/{sessionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to individual attendance records for historical sessions.
     * @path /sessions/{sessionId}/records/{recordId}
     * @allow (get, create, update, delete) Only admins can manage historical attendance records.
     * @deny (get, create, update, delete) Non-admins cannot access or modify historical attendance records.
     * @principle Enforces role-based access control for admins.
     */
    match /sessions/{sessionId}/records/{recordId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to chat messages for a specific student.
     * @path /chats/{studentUid}/messages/{messageId}
     * @allow (get, create, update, delete) Admins can manage all chats.  A student can read their own chat.
     * @deny (get, create, update, delete) Students cannot read other student's chats.
     */
    match /chats/{studentUid}/messages/{messageId} {
      allow get: if isSignedIn() && (isAdmin() || isOwner(studentUid));
      allow list: if isSignedIn() && (isAdmin() || isOwner(studentUid));
      allow create: if isSignedIn() && (isAdmin() || request.auth.uid == request.resource.data.senderUid);
      allow update: if isSignedIn() && (isAdmin() || isOwner(studentUid));
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to application-wide settings.
     * @path /settings/attendance
     * @allow (get, create, update, delete) Only admins can manage the settings.
     * @deny (get, create, update, delete) Non-admins cannot access or modify the settings.
     * @principle Enforces role-based access control for admins.
     */
    match /settings/attendance {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isAdmin() {
    return isSignedIn() && request.auth.token.role == 'admin';
  }
}