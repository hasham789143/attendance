/**
 * @fileOverview Firestore Security Rules for Attendance Tracking System
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model. Users can have 'admin' or 'viewer' roles.
 * User data is secured via ownership.
 * All write operations are carefully validated against user roles and document ownership.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /sessions/class-current: Stores the current active class attendance session. Single document.
 * - /sessions/class-current/records/{userId}: Stores live attendance records for each student in the class session.
 * - /sessions/hostel-current: Stores the current active hostel attendance session. Single document.
 * - /sessions/hostel-current/records/{userId}: Stores live attendance records for each resident in the hostel session.
 * - /sessions/{sessionId}: Stores archived attendance sessions.
 * - /sessions/{sessionId}/records/{recordId}: Stores individual attendance records for a specific historical session.
 * - /chats/{studentUid}/messages/{messageId}: Stores chat messages for a specific student.
 * - /settings/attendance: Stores application-wide settings. Single document.
 *
 * Key Security Decisions:
 * - Users can only read/write their own user documents.
 * - Only admins can manage attendance sessions and access attendance records.
 * - Chats are scoped to individual students; admins can access all chats.
 * - Only admins can modify application settings.
 *
 * Denormalization for Authorization:
 *  - AttendanceRecord documents do not contain the adminUid of the session. Access to attendance records is thus managed through path-based authorization: Only admins can read/write in "/sessions/*".
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile information.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their own profile.
     * @allow (get, update, delete) User can read/update/delete their own profile.
     * @deny (create) User cannot create a profile with a different UID.
     * @deny (get, update, delete) User cannot read/update/delete other user profiles.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isAdmin() {
        return request.auth != null && request.auth.token.role == 'admin';
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects the current class attendance session.
     * @path /sessions/class-current
     * @allow (get) Any signed-in user can read the current session.
     * @allow (create, update, delete) Only admins can manage the current session.
     * @deny (create, update, delete) Non-admins cannot manage the current session.
     * @principle Enforces role-based access control for session management.
     */
    match /sessions/class-current {
      function isAdmin() {
        return request.auth != null && request.auth.token.role == 'admin';
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Protects live attendance records for the current class session.
     * @path /sessions/class-current/records/{userId}
     * @allow (get, list) Only admins can access the records.
     * @allow (create, update, delete) Only admins can manage the records.
     * @deny (get, list, create, update, delete) Non-admins cannot access or manage the records.
     * @principle Enforces role-based access control for attendance records.
     */
    match /sessions/class-current/records/{recordId} {
      function isAdmin() {
        return request.auth != null && request.auth.token.role == 'admin';
      }
       allow get: if isAdmin();
       allow list: if false;
       allow create: if isAdmin();
       allow update: if isAdmin();
       allow delete: if isAdmin();
    }

        /**
     * @description Protects the current hostel attendance session.
     * @path /sessions/hostel-current
     * @allow (get) Any signed-in user can read the current session.
     * @allow (create, update, delete) Only admins can manage the current session.
     * @deny (create, update, delete) Non-admins cannot manage the current session.
     * @principle Enforces role-based access control for session management.
     */
    match /sessions/hostel-current {
      function isAdmin() {
        return request.auth != null && request.auth.token.role == 'admin';
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Protects live attendance records for the current hostel session.
     * @path /sessions/hostel-current/records/{userId}
     * @allow (get, list) Only admins can access the records.
     * @allow (create, update, delete) Only admins can manage the records.
     * @deny (get, list, create, update, delete) Non-admins cannot access or manage the records.
     * @principle Enforces role-based access control for attendance records.
     */
    match /sessions/hostel-current/records/{recordId} {
      function isAdmin() {
        return request.auth != null && request.auth.token.role == 'admin';
      }
       allow get: if isAdmin();
       allow list: if false;
       allow create: if isAdmin();
       allow update: if isAdmin();
       allow delete: if isAdmin();
    }

    /**
     * @description Protects archived attendance sessions.
     * @path /sessions/{sessionId}
     * @allow (get, list) Only admins can access archived sessions.
     * @allow (create, update, delete) Only admins can manage archived sessions.
     * @deny (get, list, create, update, delete) Non-admins cannot access or manage archived sessions.
     * @principle Enforces role-based access control for archived session management.
     */
    match /sessions/{sessionId} {
      function isAdmin() {
        return request.auth != null && request.auth.token.role == 'admin';
      }
       allow get: if isAdmin();
       allow list: if isAdmin();
       allow create: if isAdmin();
       allow update: if isAdmin();
       allow delete: if isAdmin();
    }

    /**
     * @description Protects individual attendance records for a specific historical session.
     * @path /sessions/{sessionId}/records/{recordId}
     * @allow (get, list) Only admins can access historical attendance records.
     * @allow (create, update, delete) Only admins can manage historical attendance records.
     * @deny (get, list, create, update, delete) Non-admins cannot access or manage historical attendance records.
     * @principle Enforces role-based access control for historical attendance records.
     */
    match /sessions/{sessionId}/records/{recordId} {
      function isAdmin() {
        return request.auth != null && request.auth.token.role == 'admin';
      }
       allow get: if isAdmin();
       allow list: if false;
       allow create: if isAdmin();
       allow update: if isAdmin();
       allow delete: if isAdmin();
    }

    /**
     * @description Protects chat messages for a specific student.
     * @path /chats/{studentUid}/messages/{messageId}
     * @allow (get, list) Only the student or admins can access the messages.
     * @allow (create) Only signed-in users can create messages.
     * @allow (update, delete) No one can update/delete messages (for auditability).
     * @deny (get, list) Other students cannot access the messages.
     * @principle Enforces ownership and role-based access control for chat messages.
     */
    match /chats/{studentUid}/messages/{messageId} {
        function isOwner(studentUid) {
            return request.auth != null && request.auth.uid == studentUid;
        }

        function isAdmin() {
            return request.auth != null && request.auth.token.role == 'admin';
        }

        allow get: if isOwner(studentUid) || isAdmin();
        allow list: if isOwner(studentUid) || isAdmin();
        allow create: if isSignedIn();
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Protects application-wide settings.
     * @path /settings/attendance
     * @allow (get) Any signed-in user can read settings.
     * @allow (create, update, delete) Only admins can modify settings.
     * @deny (create, update, delete) Non-admins cannot modify settings.
     * @principle Enforces role-based access control for application settings.
     */
    match /settings/attendance {
       function isAdmin() {
            return request.auth != null && request.auth.token.role == 'admin';
        }
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}