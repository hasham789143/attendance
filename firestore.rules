/**
 * @fileoverview Firestore Security Rules for Attendance Tracking System
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model, balancing open access for public content with strict ownership and role-based access control for sensitive data.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the owner.
 * - /sessions/class-current: Current class attendance session.
 * - /sessions/class-current/records/{userId}: Live attendance records for the current class session, accessible to admins.
 * - /sessions/hostel-current: Current hostel attendance session.
 * - /sessions/hostel-current/records/{userId}: Live attendance records for the current hostel session, accessible to admins.
 * - /sessions/{sessionId}: Archived attendance sessions, accessible only to admins.
 * - /sessions/{sessionId}/records/{recordId}: Archived attendance records for specific sessions, accessible only to admins.
 * - /chats/{studentUid}/messages/{messageId}: Chat messages for a specific student, accessible by the student and admins.
 * - /settings/attendance: Application-wide settings, accessible only to admins.
 *
 * Key Security Decisions:
 * - User listing is denied to prevent information harvesting.
 * - Admin role is required for managing sessions, records and settings.
 * - Chats are accessible to the student and admins.
 *
 * Denormalization for Authorization:
 *  - No explicit denormalization is performed, but the rules assume that the `adminUid` field in `AttendanceSession` documents correctly identifies the session creator.
 *  - Also, the rules assume that student objects are embedded directly into the `AttendanceRecord` documents which makes the code perform better.
 *
 * Structural Segregation:
 *  - Current and archived attendance sessions are stored in separate collections (/sessions/class-current and /sessions/{sessionId}) for performance and security.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the existing owner of the resource.
     * @param {string} userId - The user ID to compare against the resource's data.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the 'admin' role.
     * @returns {boolean} True if the user has the 'admin' role, false otherwise.
     */
    function isAdmin() {
        return isSignedIn() && ('admin' in request.auth.token.firebase.sign_in_provider);
    }

    /**
     * @description Rule for user profiles.
     * @path /users/{userId}
     * @allow (create) - If the user is creating their own profile (userId matches auth.uid).
     * @allow (get, update, delete) - If the user is the owner of the profile.
     * @deny (create) - If the user is trying to create a profile for another user.
     * @deny (get, update, delete) - If the user is not the owner of the profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for current class attendance session.
     * @path /sessions/class-current
     * @allow (get) - If the session exists.
     * @allow (create, update, delete) - If the user is an admin.
     * @deny (create, update, delete) - If the user is not an admin.
     * @principle Enforces admin-only access for session management.
     */
    match /sessions/class-current {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for live attendance records for current class session.
     * @path /sessions/class-current/records/{userId}
     * @allow (get, list) - If the user is an admin.
     * @allow (create, update, delete) - If the user is an admin.
     * @deny (create, update, delete) - If the user is not an admin.
     * @principle Enforces admin-only access for attendance record management.
     */
    match /sessions/class-current/records/{userId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for current hostel attendance session.
     * @path /sessions/hostel-current
     * @allow (get) - If the session exists.
     * @allow (create, update, delete) - If the user is an admin.
     * @deny (create, update, delete) - If the user is not an admin.
     * @principle Enforces admin-only access for session management.
     */
    match /sessions/hostel-current {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for live attendance records for current hostel session.
     * @path /sessions/hostel-current/records/{userId}
     * @allow (get, list) - If the user is an admin.
     * @allow (create, update, delete) - If the user is an admin.
     * @deny (create, update, delete) - If the user is not an admin.
     * @principle Enforces admin-only access for attendance record management.
     */
    match /sessions/hostel-current/records/{userId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for archived attendance sessions.
     * @path /sessions/{sessionId}
     * @allow (get, list) - If the user is an admin.
     * @allow (create, update, delete) - If the user is an admin.
     * @deny (create, update, delete) - If the user is not an admin.
     * @principle Enforces admin-only access for archived sessions.
     */
    match /sessions/{sessionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for attendance records for a specific historical session.
     * @path /sessions/{sessionId}/records/{recordId}
     * @allow (get, list) - If the user is an admin.
     * @allow (create, update, delete) - If the user is an admin.
     * @deny (create, update, delete) - If the user is not an admin.
     * @principle Enforces admin-only access for historical attendance records.
     */
    match /sessions/{sessionId}/records/{recordId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for chat messages for a specific student.
     * @path /chats/{studentUid}/messages/{messageId}
     * @allow (get, list) - If the user is the student or an admin.
     * @allow (create) - If the user is the student or an admin.
     * @allow (update, delete) - If the user is an admin.
     * @deny (create) - If the user is not the student or an admin.
     * @deny (update, delete) - If the user is not an admin.
     * @principle Enforces student/admin access for chat messages.
     */
    match /chats/{studentUid}/messages/{messageId} {
      allow get: if isOwner(studentUid) || isAdmin();
      allow list: if isOwner(studentUid) || isAdmin();
      allow create: if isOwner(studentUid) || isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rule for application-wide settings.
     * @path /settings/attendance
     * @allow (get) - If the document exists.
     * @allow (create, update, delete) - If the user is an admin.
     * @deny (create, update, delete) - If the user is not an admin.
     * @principle Enforces admin-only access for settings.
     */
    match /settings/attendance {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}