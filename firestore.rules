/**
 * @file Firebase Security Rules for Attendance Tracking System
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles,
 *                  admin-only access for session creation and management, and allows
 *                  students to only write to their own attendance records during active sessions.
 * @data_structure The data is organized hierarchically with user profiles stored under
 *                 /users/{userId}, attendance sessions stored under /sessions/{sessionId},
 *                 and attendance records stored as subcollections of sessions.  There
 *                 are separate collections for current class and hostel sessions. Chat
 *                 messages are stored under /chats/{studentUid}/messages/{messageId} with the studentUid
 *                 being the unique identifier for each student.  Application settings are stored in
 *                 /settings/attendance.
 * @key_security_decisions
 *   - Users can only read/write their own profile data.
 *   - Only authenticated users can create attendance sessions.
 *   - Listing all users is disallowed.
 *   - Only admins can create sessions.
 *   - Only admins can read archived sessions.
 *   - Only the owner of an attendance record can create it.
 *   - Admins can read all chats, while students can only read their own.
 * @denormalization_for_authorization The adminUid field on the AttendanceSession document
 *                                      is used to quickly check if the current user is the admin
 *                                      who created the session.
 * @structural_segregation The use of separate collections (/sessions/class-current and
 *                        /sessions/hostel-current) for current attendance sessions segregates
 *                        active sessions from archived ones, simplifying security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (read, write) if the user's UID matches the userId in the path.
     * @deny (read, write) if the user is not authenticated or the UID does not match the userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows admins to read and create current class attendance sessions.
     *              Only admins can modify or delete the current session.
     * @path /sessions/class-current
     * @allow (get, create) if the user is an admin.
     * @deny (update, delete) to non-admins.
     * @principle Restricts session management to admin users.
     */
    match /sessions/class-current {
      function isAdmin() {
        return request.auth.token.role == 'admin';
      }
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows students to create their own attendance records in the current class session.
     *              Admins can read all attendance records.
     * @path /sessions/class-current/records/{userId}
     * @allow (create) if the user's UID matches the userId in the path.
     * @allow (get, list) if the user is an admin.
     * @deny (update, delete) to non-admins.
     * @principle Allows user-specific writes under an admin-controlled document.
     */
    match /sessions/class-current/records/{userId} {
      function isAdmin() {
        return request.auth.token.role == 'admin';
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isAdmin() || (isSignedIn() && isOwner(userId));
      allow list: if isAdmin();
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if false;
      allow delete: if false;
    }

      /**
     * @description Allows admins to read and create current hostel attendance sessions.
     *              Only admins can modify or delete the current session.
     * @path /sessions/hostel-current
     * @allow (get, create) if the user is an admin.
     * @deny (update, delete) to non-admins.
     * @principle Restricts session management to admin users.
     */
        match /sessions/hostel-current {
          function isAdmin() {
            return request.auth.token.role == 'admin';
          }
          allow get: if isAdmin();
          allow list: if false;
          allow create: if isAdmin();
          allow update: if isAdmin();
          allow delete: if isAdmin();
        }

        /**
         * @description Allows students to create their own attendance records in the current hostel session.
         *              Admins can read all attendance records.
         * @path /sessions/hostel-current/records/{userId}
         * @allow (create) if the user's UID matches the userId in the path.
         * @allow (get, list) if the user is an admin.
         * @deny (update, delete) to non-admins.
         * @principle Allows user-specific writes under an admin-controlled document.
         */
        match /sessions/hostel-current/records/{userId} {
          function isAdmin() {
            return request.auth.token.role == 'admin';
          }
          function isOwner(userId) {
            return request.auth.uid == userId;
          }
          function isSignedIn() {
        return request.auth != null;
      }
          allow get: if isAdmin() || (isSignedIn() && isOwner(userId));
          allow list: if isAdmin();
          allow create: if isSignedIn() && isOwner(userId);
          allow update: if false;
          allow delete: if false;
        }

    /**
     * @description Allows admins to read archived attendance sessions.
     *              No one can create, update, or delete archived sessions via client.
     * @path /sessions/{sessionId}
     * @allow (get) if the user is an admin.
     * @deny (create, update, delete) to all users.
     * @principle Restricts access to archived sessions to admins only.
     */
    match /sessions/{sessionId} {
      function isAdmin() {
        return request.auth.token.role == 'admin';
      }
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows admins to read individual attendance records for a specific historical session.
     *              No one can create, update, or delete historical records via client.
     * @path /sessions/{sessionId}/records/{recordId}
     * @allow (get) if the user is an admin.
     * @deny (create, update, delete) to all users.
     * @principle Restricts access to archived attendance records to admins only.
     */
    match /sessions/{sessionId}/records/{recordId} {
      function isAdmin() {
        return request.auth.token.role == 'admin';
      }
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows admins to read and write all chat messages.
     *              Allows students to read and write their own chat messages.
     * @path /chats/{studentUid}/messages/{messageId}
     * @allow (get, list) if the user is an admin or the student.
     * @allow (create) if the user is an admin or the student.
     * @deny (update, delete) to non-admins and non-students.
     * @principle Enforces role-based access control for chat messages.
     */
    match /chats/{studentUid}/messages/{messageId} {
       function isAdmin() {
        return request.auth.token.role == 'admin';
      }
      function isOwner(studentUid) {
        return request.auth.uid == studentUid;
      }
       function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isAdmin() || (isSignedIn() && isOwner(studentUid));
      allow list: if isAdmin() || (isSignedIn() && isOwner(studentUid));
      allow create: if isSignedIn() && (isAdmin() || isOwner(studentUid));
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows admins to read and write application-wide settings.
     * @path /settings/attendance
     * @allow (get, update) if the user is an admin.
     * @deny (create, delete) to all users.
     * @principle Restricts settings management to admin users.
     */
    match /settings/attendance {
      function isAdmin() {
        return request.auth.token.role == 'admin';
      }
      allow get: if isAdmin();
      allow list: if false;
      allow create: if false;
      allow update: if isAdmin();
      allow delete: if false;
    }
  }
}