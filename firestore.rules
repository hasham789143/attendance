/**
 * @fileoverview Firestore Security Rules for Attendance Tracking System
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model with "admin", "viewer", and "disabled" roles.
 * Users can only access their own user documents, while admins have broader read and write access. Viewers have limited read access.
 * Data validation is minimized for prototyping, focusing on authorization and relational integrity only.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, where {userId} matches the Firebase Auth UID.
 * - /sessions/class-current: Stores the current active class attendance session.
 * - /sessions/class-current/records/{userId}: Stores live attendance records for each student in the active class session.
 * - /sessions/hostel-current: Stores the current active hostel attendance session.
 * - /sessions/hostel-current/records/{userId}: Stores live attendance records for each resident in the active hostel session.
 * - /sessions/{sessionId}: Stores archived attendance sessions.
 * - /sessions/{sessionId}/records/{recordId}: Stores individual attendance records for specific historical sessions.
 * - /chats/{studentUid}/messages/{messageId}: Stores chat messages for a specific student.
 * - /settings/attendance: Stores application-wide settings (single document).
 *
 * Key Security Decisions:
 * - Users can only read and write their own user documents in /users/{userId}.
 * - Admins can read and write any user document.
 * - Viewers can read any user document but cannot write.
 * - Attendance session creation is restricted to admins.
 * - Chat message access is restricted to admins and the specific student.
 * - Settings modification is restricted to admins.
 *
 * Denormalization for Authorization:
 *  - Attendance records contain the student's user ID, enabling owner-based access control.
 *
 * Structural Segregation:
 *  - Current and historical attendance sessions are stored in separate collections for optimized querying.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile, and admins to manage all user profiles.
     * @path /users/{userId}
     * @allow (read, write) if isSignedIn() && isOwner(userId)
     * @allow (read, write) if isSignedIn() && isAdmin()
     * @deny (write) if isSignedIn() && isViewer()
     * @deny (write) if !isSignedIn()
     * @principle Enforces document ownership and role-based access control.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin() || isViewer());
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow update: if isSignedIn() && (isOwner(userId) && request.auth.uid == userId) || isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows admins to manage the current active class attendance session.
     * @path /sessions/class-current
     * @allow (read) if isSignedIn()
     * @allow (write) if isSignedIn() && isAdmin()
     * @deny (write) if !isSignedIn() || !isAdmin()
     * @principle Restricts session management to admins.
     */
    match /sessions/class-current {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows students to write their own attendance record in the current class session.
     * @path /sessions/class-current/records/{userId}
     * @allow (read) if isSignedIn() && (isAdmin() || isViewer() || isOwner(userId))
     * @allow (write) if isSignedIn() && (isAdmin() || isOwner(userId))
     * @deny (write) if !isSignedIn()
     * @principle Allows students to manage their own attendance records and admins to manage all records.
     */
    match /sessions/class-current/records/{userId} {
      allow get: if isSignedIn() && (isAdmin() || isViewer() || isOwner(userId));
      allow list: if false;
      allow create: if isSignedIn() && (isAdmin() || isOwner(userId) && request.auth.uid == userId);
      allow update: if isSignedIn() && (isAdmin() || isOwner(userId) && request.auth.uid == userId);
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows admins to manage the current active hostel attendance session.
     * @path /sessions/hostel-current
     * @allow (read) if isSignedIn()
     * @allow (write) if isSignedIn() && isAdmin()
     * @deny (write) if !isSignedIn() || !isAdmin()
     * @principle Restricts session management to admins.
     */
    match /sessions/hostel-current {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows residents to write their own attendance record in the current hostel session.
     * @path /sessions/hostel-current/records/{userId}
     * @allow (read) if isSignedIn() && (isAdmin() || isViewer() || isOwner(userId))
     * @allow (write) if isSignedIn() && (isAdmin() || isOwner(userId))
     * @deny (write) if !isSignedIn()
     * @principle Allows residents to manage their own attendance records and admins to manage all records.
     */
    match /sessions/hostel-current/records/{userId} {
      allow get: if isSignedIn() && (isAdmin() || isViewer() || isOwner(userId));
      allow list: if false;
      allow create: if isSignedIn() && (isAdmin() || isOwner(userId) && request.auth.uid == userId);
      allow update: if isSignedIn() && (isAdmin() || isOwner(userId) && request.auth.uid == userId);
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows admins to manage archived attendance sessions.
     * @path /sessions/{sessionId}
     * @allow (read) if isSignedIn()
     * @allow (write) if isSignedIn() && isAdmin()
     * @deny (write) if !isSignedIn() || !isAdmin()
     * @principle Restricts archived session management to admins.
     */
    match /sessions/{sessionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn() && (isAdmin() || isViewer());
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows admins to manage individual attendance records for a specific historical session.
     * @path /sessions/{sessionId}/records/{recordId}
     * @allow (read) if isSignedIn() && (isAdmin() || isViewer())
     * @allow (write) if isSignedIn() && isAdmin()
     * @deny (write) if !isSignedIn() || !isAdmin()
     * @principle Restricts historical record management to admins.
     */
    match /sessions/{sessionId}/records/{recordId} {
      allow get: if isSignedIn() && (isAdmin() || isViewer());
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows admins and the specific student to access chat messages.
     * @path /chats/{studentUid}/messages/{messageId}
     * @allow (read, write) if isSignedIn() && (isAdmin() || isOwner(studentUid))
     * @deny (write) if !isSignedIn()
     * @principle Restricts chat access to authorized users.
     */
    match /chats/{studentUid}/messages/{messageId} {
      allow get: if isSignedIn() && (isAdmin() || isOwner(studentUid));
      allow list: if false;
      allow create: if isSignedIn() && (isAdmin() || isOwner(studentUid) && request.auth.uid == studentUid);
      allow update: if isSignedIn() && (isAdmin() || isOwner(studentUid) && request.auth.uid == studentUid);
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows admins to manage application-wide settings.
     * @path /settings/attendance
     * @allow (read) if isSignedIn()
     * @allow (write) if isSignedIn() && isAdmin()
     * @deny (write) if !isSignedIn() || !isAdmin()
     * @principle Restricts settings modification to admins.
     */
    match /settings/attendance {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isAdmin() {
    return isSignedIn() && request.auth.token.role == 'admin';
  }

  function isViewer() {
    return isSignedIn() && request.auth.token.role == 'viewer';
  }
}