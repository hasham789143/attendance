/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and admin-controlled access to attendance sessions and records.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only to the user themselves.
 * - /sessions/class-current: The current active class attendance session.
 * - /sessions/class-current/records/{userId}: Live attendance records for the current class session.
 * - /sessions/hostel-current: The current active hostel attendance session.
 * - /sessions/hostel-current/records/{userId}: Live attendance records for the current hostel session.
 * - /sessions/{sessionId}: Archived attendance sessions.
 * - /sessions/{sessionId}/records/{recordId}: Archived attendance records for historical sessions.
 * - /chats/{studentUid}/messages/{messageId}: Chat messages for a specific student.
 * - /settings/attendance: Application-wide settings.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Only authenticated users can access attendance sessions and records.
 * - Chat messages are scoped to individual students, with admins having read access.
 * - The /users collection is not listable by regular users to prevent enumeration.
 * - Settings are only writable by admins (currently not implemented).
 *
 * Denormalization for Authorization:
 * - Attendance sessions contain an `adminUid` field, which is used to authorize admin access to the session and its records.
 *
 * Structural Segregation:
 * - Active and archived attendance sessions are stored in separate collections to optimize querying and security.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }


    /***************** User Profile Rules (/users/{userId}) *****************/

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User 'gReKIvBYfdfm8Lll59N8RPHUMtD2' can create their profile with matching UID.
     * @allow (get) User 'gReKIvBYfdfm8Lll59N8RPHUMtD2' can read their own profile.
     * @allow (update) User 'gReKIvBYfdfm8Lll59N8RPHUMtD2' can update their own profile.
     * @allow (delete) User 'gReKIvBYfdfm8Lll59N8RPHUMtD2' can delete their own profile.
     * @deny (create) User 'otherUser' cannot create a profile for 'gReKIvBYfdfm8Lll59N8RPHUMtD2'.
     * @deny (get) User 'otherUser' cannot read the profile of 'gReKIvBYfdfm8Lll59N8RPHUMtD2'.
     * @deny (update) User 'otherUser' cannot update the profile of 'gReKIvBYfdfm8Lll59N8RPHUMtD2'.
     * @deny (delete) User 'otherUser' cannot delete the profile of 'gReKIvBYfdfm8Lll59N8RPHUMtD2'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Users collection is not listable.

      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /***************** Current Class Session Rules (/sessions/class-current) *****************/

    /**
     * @description Controls access to the current class attendance session document.
     * @path /sessions/class-current
     * @allow (get) Authenticated users can read the current class session.
     * @deny (create) No one can create the /sessions/class-current document directly through the client.
     * @deny (update) No one can update the /sessions/class-current document directly through the client.
     * @deny (delete) No one can delete the /sessions/class-current document directly through the client.
     * @principle Restricts write access to the current class session.
     */
    match /sessions/class-current {
      allow get: if isSignedIn();
      allow list: if false;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /***************** Current Class Session Records Rules (/sessions/class-current/records/{userId}) *****************/

    /**
     * @description Controls access to attendance records for the current class session.
     * @path /sessions/class-current/records/{userId}
     * @allow (get) Authenticated users can read attendance record.
     * @deny (create) No one can create the /sessions/class-current/records/{userId} document directly through the client.
     * @deny (update) No one can update the /sessions/class-current/records/{userId} document directly through the client.
     * @deny (delete) No one can delete the /sessions/class-current/records/{userId} document directly through the client.
     * @principle Restricts write access to the current class session records.
     */
    match /sessions/class-current/records/{userId} {
      allow get: if isSignedIn();
      allow list: if false;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    /***************** Current Hostel Session Rules (/sessions/hostel-current) *****************/

    /**
     * @description Controls access to the current hostel attendance session document.
     * @path /sessions/hostel-current
     * @allow (get) Authenticated users can read the current hostel session.
     * @deny (create) No one can create the /sessions/hostel-current document directly through the client.
     * @deny (update) No one can update the /sessions/hostel-current document directly through the client.
     * @deny (delete) No one can delete the /sessions/hostel-current document directly through the client.
     * @principle Restricts write access to the current hostel session.
     */
    match /sessions/hostel-current {
      allow get: if isSignedIn();
      allow list: if false;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /***************** Current Hostel Session Records Rules (/sessions/hostel-current/records/{userId}) *****************/

    /**
     * @description Controls access to attendance records for the current hostel session.
     * @path /sessions/hostel-current/records/{userId}
     * @allow (get) Authenticated users can read attendance record.
     * @deny (create) No one can create the /sessions/hostel-current/records/{userId} document directly through the client.
     * @deny (update) No one can update the /sessions/hostel-current/records/{userId} document directly through the client.
     * @deny (delete) No one can delete the /sessions/hostel-current/records/{userId} document directly through the client.
     * @principle Restricts write access to the current hostel session records.
     */
    match /sessions/hostel-current/records/{userId} {
      allow get: if isSignedIn();
      allow list: if false;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /***************** Archived Session Rules (/sessions/{sessionId}) *****************/

    /**
     * @description Controls access to archived attendance session documents.
     * @path /sessions/{sessionId}
     * @allow (get) Authenticated users can read archived session.
     * @deny (create) No one can create the /sessions/{sessionId} document directly through the client.
     * @deny (update) No one can update the /sessions/{sessionId} document directly through the client.
     * @deny (delete) No one can delete the /sessions/{sessionId} document directly through the client.
     * @principle Restricts write access to archived sessions.
     */
    match /sessions/{sessionId} {
      allow get: if isSignedIn();
      allow list: if false;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /***************** Archived Session Records Rules (/sessions/{sessionId}/records/{recordId}) *****************/

    /**
     * @description Controls access to attendance records for archived sessions.
     * @path /sessions/{sessionId}/records/{recordId}
     * @allow (get) Authenticated users can read an archived attendance record.
     * @deny (create) No one can create the /sessions/{sessionId}/records/{recordId} document directly through the client.
     * @deny (update) No one can update the /sessions/{sessionId}/records/{recordId} document directly through the client.
     * @deny (delete) No one can delete the /sessions/{sessionId}/records/{recordId} document directly through the client.
     * @principle Restricts write access to archived session records.
     */
    match /sessions/{sessionId}/records/{recordId} {
      allow get: if isSignedIn();
      allow list: if false;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /***************** Chat Message Rules (/chats/{studentUid}/messages/{messageId}) *****************/

    /**
     * @description Controls access to chat messages for a specific student.
     * @path /chats/{studentUid}/messages/{messageId}
     * @allow (get) User can read their own chat messages
     * @allow (list) User can list their own chat messages
     * @allow (create) User can create messages in their own chat.
     * @deny (update) No one can update messages.
     * @deny (delete) No one can delete messages.
     * @principle Enforces ownership for chat messages.
     */
    match /chats/{studentUid}/messages/{messageId} {
        allow get: if isOwner(studentUid);
        allow list: if isOwner(studentUid);

        allow create: if isOwner(studentUid) && request.resource.data.senderUid == request.auth.uid;
        allow update: if false;
        allow delete: if false;
    }

      /***************** Settings Rules (/settings/attendance) *****************/

    /**
     * @description Controls access to application-wide settings.
     * @path /settings/attendance
     * @allow (get) Any authenticated user can read the settings.
     * @deny (create) No one can create the /settings/attendance document directly through the client.
     * @deny (update) No one can update the /settings/attendance document directly through the client.
     * @deny (delete) No one can delete the /settings/attendance document directly through the client.
     * @principle Restricts write access to application settings.
     */
    match /settings/attendance {
      allow get: if isSignedIn();
      allow list: if false;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}