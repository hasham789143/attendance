rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user's UID matches the requested userId.
     * @param {string} userId - The user ID to check against.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an admin.
     */
    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'admin';
    }
    
     /**
     * @description Checks if the user is an admin, and that the document exists.
     */
    function isExistingAdmin(adminUid) {
        return isAdmin() && resource.data.adminUid == adminUid;
    }

    /**
     * @description Checks if the user is the owner, and that the document exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource.data.uid == userId;
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the UID matches.
     * @allow (get, list) - Authenticated user can read their own profile.
     * @allow (update, delete) - Authenticated user can update/delete their own profile.
     * @deny (create) - User cannot create a profile with a mismatched UID.
     * @deny (get, list) - User cannot list all user profiles.
     * @principle Enforces user ownership and prevents unauthorized profile access.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Security rules for the current class attendance session.
     * @path /sessions/class-current
     * @allow (get) - Any authenticated user can read the current class session.
     * @allow (create, update, delete) - Only admins can manage the current class session.
     * @deny (create, update, delete) - Non-admins cannot modify the current class session.
     * @principle Restricts management of the current class session to admins.
     */
    match /sessions/class-current {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Security rules for attendance records in the current class session.
     * @path /sessions/class-current/records/{userId}
     * @allow (get, list) - Any authenticated user can read attendance records.
     * @allow (create, update, delete) - Only admins can manage attendance records.
     * @deny (create, update, delete) - Non-admins cannot modify attendance records.
     * @principle Restricts management of attendance records to admins.
     */
    match /sessions/class-current/records/{recordId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
     * @description Security rules for the current hostel attendance session.
     * @path /sessions/hostel-current
     * @allow (get) - Any authenticated user can read the current hostel session.
     * @allow (create, update, delete) - Only admins can manage the current hostel session.
     * @deny (create, update, delete) - Non-admins cannot modify the current hostel session.
     * @principle Restricts management of the current hostel session to admins.
     */
    match /sessions/hostel-current {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Security rules for attendance records in the current hostel session.
     * @path /sessions/hostel-current/records/{userId}
     * @allow (get, list) - Any authenticated user can read attendance records.
     * @allow (create, update, delete) - Only admins can manage attendance records.
     * @deny (create, update, delete) - Non-admins cannot modify attendance records.
     * @principle Restricts management of attendance records to admins.
     */
    match /sessions/hostel-current/records/{recordId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Security rules for archived attendance sessions.
     * @path /sessions/{sessionId}
     * @allow (get) - Any authenticated user can read archived sessions.
     * @allow (create, update, delete) - Only admins can manage archived sessions.
     * @deny (create, update, delete) - Non-admins cannot modify archived sessions.
     * @principle Restricts management of archived sessions to admins.
     */
    match /sessions/{sessionId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Security rules for attendance records in archived sessions.
     * @path /sessions/{sessionId}/records/{recordId}
     * @allow (get, list) - Any authenticated user can read attendance records.
     * @allow (create, update, delete) - Only admins can manage attendance records.
     * @deny (create, update, delete) - Non-admins cannot modify attendance records.
     * @principle Restricts management of attendance records to admins.
     */
    match /sessions/{sessionId}/records/{recordId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Security rules for chat messages.
     * @path /chats/{studentUid}/messages/{messageId}
     * @allow (get, list) - Admins can read all messages. Students can only read their own messages.
     * @allow (create) - Any authenticated user can send a message.
     * @allow (update, delete) - No updates or deletes are allowed.
     * @deny (create) - User cannot create a message for a different student.
     * @principle Restricts chat access based on role and ownership.
     */
    match /chats/{studentUid}/messages/{messageId} {
      allow get: if isAdmin() || isOwner(studentUid);
      allow list: if isAdmin() || isOwner(studentUid);
      allow create: if isSignedIn() && request.auth.uid == studentUid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Security rules for application-wide settings.
     * @path /settings/attendance
     * @allow (get) - Any authenticated user can read settings.
     * @allow (update) - Only admins can modify settings.
     * @allow (create, delete) - No creates or deletes are allowed.
     * @deny (update) - Non-admins cannot modify settings.
     * @principle Restricts settings management to admins.
     */
    match /settings/{document=attendance} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if isAdmin();
      allow delete: if false;
    }
  }
}