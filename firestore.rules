/**
 * @fileOverview Firestore Security Rules for Attendance Tracking System
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and restricts
 * access to attendance sessions and records based on user roles. It prioritizes
 * secure access to user data while allowing controlled access to attendance information.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, with 'userId' matching the Firebase Auth UID.
 * - /sessions/current: Stores the current active attendance session.
 * - /attendance/{attendanceId}: Stores individual attendance records.
 * - /settings/attendance: Stores application-wide settings.
 *
 * Key Security Decisions:
 * - User profiles are strictly owned by the authenticated user.
 * - Attendance session creation is likely limited to admins (not explicitly defined here, needs more information).
 * - Attendance records can be read publicly, but only created by authenticated users.
 * - Listing of user documents is disallowed for privacy reasons.
 *
 * Denormalization for Authorization:
 *  - User documents denormalize the 'uid' field, which is validated against the document ID during creation to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile.
     * @allow (update) User with UID 'user123' can update their own profile.
     * @allow (get) User with UID 'user123' can read their own profile.
     * @deny (create) User with UID 'user456' cannot create a profile with UID 'user123'.
     * @deny (update) User with UID 'user456' cannot update the profile of user 'user123'.
     * @deny (delete) Only the owner can delete
     * @principle Enforces document ownership for user profiles and validates the uid.
     */
    match /users/{userId} {
      //isOwner(userId)
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to the current attendance session.
     * @path /sessions/current
     * @allow (get) Any signed-in user can read the current session.
     * @deny (create) Only admins can create attendance sessions (not yet implemented).
     * @deny (update) Only admins can update attendance sessions (not yet implemented).
     * @deny (delete) Only admins can delete attendance sessions (not yet implemented).
     * @principle Restricts write access to admins for session management.
     */
    match /sessions/{sessionId} {
      allow get: if isSignedIn();
      allow list: if false;
      // TODO: Add more specific admin role check
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

     /**
      * @description Controls access to individual attendance records.
      * @path /attendance/{attendanceId}
      * @allow (get) Any signed-in user can read attendance records.
      * @allow (create) Any signed-in user can create attendance records.
      * @deny (update) Only admins can update attendance records (not yet implemented).
      * @deny (delete) Only admins can delete attendance records (not yet implemented).
      * @principle Allows public read access but restricts write access to specific roles.
      */
    match /attendance/{attendanceId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      // TODO: Add more specific admin role check
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to application-wide settings.
     * @path /settings/attendance
     * @allow (get) Any signed-in user can read the settings.
     * @deny (create) No one can create settings because there is exactly one and it already exists.
     * @deny (update) Only admins can update the settings (not yet implemented).
     * @deny (delete) No one can delete settings because there is exactly one.
     * @principle Allows public read access but restricts write access to specific roles.
     */
    match /settings/attendance {
      allow get: if isSignedIn();
      allow list: if false;
      // TODO: Add more specific admin role check
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the user is the existing owner of the document.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}