rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - User with matching UID can create their own profile.
     * @allow (get, update, delete) - User with matching UID can read, update, and delete their own profile. Admins can get, update, and delete any user profile.
     * @deny (create) - User cannot create a profile with a mismatched UID.
     * @deny (update, delete) - User cannot update or delete another user's profile.
     * @principle Enforces document ownership for writes, allows admin overrides.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && (request.auth.uid == userId || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && (request.auth.uid == userId || isAdmin());
      allow delete: if isSignedIn() && (request.auth.uid == userId || isAdmin());
    }

    /**
     * @description Controls access to the current class attendance session.
     * @path /sessions/class-current
     * @allow (get) - Any signed-in user can read the current class session.
     * @allow (create, update, delete) - Only admins can create, update, or delete the current class session.
     * @deny (create, update, delete) - Non-admins cannot create, update, or delete the current class session.
     * @principle Enforces admin-only writes for session management.
     */
    match /sessions/class-current {
      allow get: if isSignedIn() ;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to live attendance records for the current class session.
     * @path /sessions/class-current/records/{userId}
     * @allow (get, list) - Admins can read any record. Users can only get their own record.
     * @allow (create) - Only admins can create new records.
     * @allow (update) - Only admins can update any record.
     * @allow (delete) - Only admins can delete records.
     * @deny (create, update, delete) - Regular users cannot create, update, or delete attendance records.
     * @principle Enforces admin-only writes for attendance management.
     */
    match /sessions/class-current/records/{userId} {
      allow get: if isSignedIn() && (isAdmin() || request.auth.uid == userId);
      allow list: if isSignedIn() && isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to the current hostel attendance session.
     * @path /sessions/hostel-current
     * @allow (get) - Any signed-in user can read the current hostel session.
     * @allow (create, update, delete) - Only admins can create, update, or delete the current hostel session.
     * @deny (create, update, delete) - Non-admins cannot create, update, or delete the current hostel session.
     * @principle Enforces admin-only writes for session management.
     */
    match /sessions/hostel-current {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to live attendance records for the current hostel session.
     * @path /sessions/hostel-current/records/{userId}
     * @allow (get, list) - Admins can read any record. Users can only get their own record.
     * @allow (create) - Only admins can create new records.
     * @allow (update) - Only admins can update any record.
     * @allow (delete) - Only admins can delete records.
     * @deny (create, update, delete) - Regular users cannot create, update, or delete attendance records.
     * @principle Enforces admin-only writes for attendance management.
     */
    match /sessions/hostel-current/records/{userId} {
      allow get: if isSignedIn() && (isAdmin() || request.auth.uid == userId);
      allow list: if isSignedIn() && isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to archived attendance sessions.
     * @path /sessions/{sessionId}
     * @allow (get, list) - Only admins can read or list archived sessions.
     * @allow (create, update, delete) - Only admins can create, update, or delete archived sessions.
     * @deny (create, update, delete) - Non-admins cannot create, update, or delete archived sessions.
     * @principle Enforces admin-only access to historical session data.
     */
    match /sessions/{sessionId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to individual attendance records for a specific historical session.
     * @path /sessions/{sessionId}/records/{recordId}
     * @allow (get, list) - Only admins can read or list historical attendance records.
     * @allow (create, update, delete) - Only admins can create, update, or delete historical attendance records.
     * @deny (create, update, delete) - Regular users cannot create, update, or delete historical attendance records.
     * @principle Enforces admin-only access to historical attendance data.
     */
    match /sessions/{sessionId}/records/{recordId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to chat messages for a specific student.
     * @path /chats/{studentUid}/messages/{messageId}
     * @allow (get, list) - The student and admins can read chat messages.
     * @allow (create) - The student and admins can create chat messages.
     * @allow (update, delete) - Only admins can update or delete chat messages.
     * @deny (create, update, delete) - Regular users cannot update or delete messages.
     * @principle Allows students and admins to chat, with admin control over message modification.
     */
    match /chats/{studentUid}/messages/{messageId} {
      allow get: if isSignedIn() && (request.auth.uid == studentUid || isAdmin());
      allow list: if isSignedIn() && (request.auth.uid == studentUid || isAdmin());
      allow create: if isSignedIn() && (request.auth.uid == studentUid || isAdmin());
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to application-wide settings.
     * @path /settings/attendance
     * @allow (get) - Any signed-in user can read the settings.
     * @allow (create, update, delete) - Only admins can create, update, or delete the settings.
     * @deny (create, update, delete) - Non-admins cannot create, update, or delete the settings.
     * @principle Enforces admin-only writes for application configuration.
     */
    match /settings/attendance {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isAdmin() {
    return isSignedIn() && request.auth.token.role == 'admin';
  }
}