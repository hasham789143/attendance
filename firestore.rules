/**
 * @fileoverview Firestore Security Rules for Attendance Tracking System
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model with "admin" and "viewer" roles,
 * and a user-ownership model for user profiles. Only admins can manage settings and create attendance sessions.
 * Users can only access their own profile data and chat messages. Attendance records are generally not directly accessible
 * via client reads except when listing their own records in user-specific subcollections.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, secured via ownership (`userId` must match `request.auth.uid`).
 * - /sessions/class-current: Stores the current active class attendance session.
 * - /sessions/class-current/records/{userId}: Live attendance records for the current class session.
 * - /sessions/hostel-current: Stores the current active hostel attendance session.
 * - /sessions/hostel-current/records/{userId}: Live attendance records for the current hostel session.
 * - /sessions/{sessionId}: Archived attendance sessions.
 * - /sessions/{sessionId}/records/{recordId}: Individual attendance records for a specific historical session.
 * - /chats/{studentUid}/messages/{messageId}: Chat messages for a specific student.
 * - /settings/attendance: Application-wide settings.
 *
 * Key Security Decisions:
 * - Admins have full read and write access to attendance sessions and settings.
 * - Users can only read and write their own profile data.
 * - Users can only read chat messages associated with their user ID.
 * - Listing of all users is disallowed for privacy and security reasons.
 * - Public read access is NOT granted to any collections containing private user data.
 *
 * Denormalization for Authorization:
 * No denormalization is explicitly used in these rules, but consider adding `adminUid` fields to attendance records
 * to simplify admin-based authorization checks if needed in the future.
 *
 * Structural Segregation:
 * The use of separate collections for live and archived attendance sessions (/sessions/class-current vs /sessions/{sessionId})
 * improves query performance and security by isolating active data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user's ID matches the requested ID.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is signed in and the user ID matches, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of a document.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is signed in, the user ID matches, and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the 'admin' role.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
    }
    /**
     * @description Enforces that only admins can create, update, or delete data.
     * @return {boolean} True if the user is an admin.
     */
    function onlyAdminsCanWrite() {
        return isAdmin();
    }

    /**
     * @description Stores user profile information.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates their own profile with matching userId.
     * @allow (get) User with UID 'user123' reads their own profile.
     * @deny (create) User with UID 'user123' attempts to create a profile for 'user456'.
     * @deny (update) User with UID 'user123' attempts to update the profile of 'user456'.
     * @principle Enforces document ownership for writes; users can only manage their own profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores the current active class attendance session. This is a single document.
     * @path /sessions/class-current
     * @allow (create) Admin creates a new class session.
     * @allow (get) Any signed-in user can read the current class session.
     * @deny (create) Non-admin attempts to create a class session.
     * @principle Restricts session management to admins; allows read access to signed-in users.
     */
    match /sessions/class-current {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if onlyAdminsCanWrite();
      allow update: if onlyAdminsCanWrite() && resource != null;
      allow delete: if onlyAdminsCanWrite() && resource != null;
    }

     /**
     * @description Stores the current active hostel attendance session. This is a single document.
     * @path /sessions/hostel-current
     * @allow (create) Admin creates a new hostel session.
     * @allow (get) Any signed-in user can read the current hostel session.
     * @deny (create) Non-admin attempts to create a hostel session.
     * @principle Restricts session management to admins; allows read access to signed-in users.
     */
      match /sessions/hostel-current {
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if onlyAdminsCanWrite();
        allow update: if onlyAdminsCanWrite() && resource != null;
        allow delete: if onlyAdminsCanWrite() && resource != null;
      }

    /**
     * @description Stores the live attendance records for each student in the currently active class session.
     * @path /sessions/class-current/records/{userId}
     * @allow (get) Only admins can read attendance records.
     * @allow (list) Only admins can list attendance records.
     * @allow (create) Only admins can create attendance records.
     * @deny (create) Non-admin attempts to create an attendance record.
     * @principle Restricts attendance record management to admins.
     */
    match /sessions/class-current/records/{userId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if onlyAdminsCanWrite();
      allow update: if onlyAdminsCanWrite() && resource != null;
      allow delete: if onlyAdminsCanWrite() && resource != null;
    }
      /**
       * @description Stores the live attendance records for each resident in the currently active hostel session.
       * @path /sessions/hostel-current/records/{userId}
       * @allow (get) Only admins can read attendance records.
       * @allow (list) Only admins can list attendance records.
       * @allow (create) Only admins can create attendance records.
       * @deny (create) Non-admin attempts to create an attendance record.
       * @principle Restricts attendance record management to admins.
       */
    match /sessions/hostel-current/records/{userId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if onlyAdminsCanWrite();
      allow update: if onlyAdminsCanWrite() && resource != null;
      allow delete: if onlyAdminsCanWrite() && resource != null;
    }


    /**
     * @description Stores an archived attendance session.
     * @path /sessions/{sessionId}
     * @allow (get) Admins can retrieve archived sessions.
     * @allow (list) Admins can list archived sessions.
     * @deny (create) Non-admin attempts to create an archived session.
     * @principle Restricts management of archived sessions to admins.
     */
    match /sessions/{sessionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if onlyAdminsCanWrite();
      allow update: if onlyAdminsCanWrite() && resource != null;
      allow delete: if onlyAdminsCanWrite() && resource != null;
    }

    /**
     * @description Stores individual attendance records for a specific historical session.
     * @path /sessions/{sessionId}/records/{recordId}
     * @allow (get) Admins can read historical attendance records.
     * @allow (list) Admins can list historical attendance records.
     * @deny (create) Non-admin attempts to create a historical attendance record.
     * @principle Restricts access to historical attendance records to admins.
     */
    match /sessions/{sessionId}/records/{recordId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if onlyAdminsCanWrite();
      allow update: if onlyAdminsCanWrite() && resource != null;
      allow delete: if onlyAdminsCanWrite() && resource != null;
    }

    /**
     * @description Stores chat messages for a specific student. Admins can access all chats.
     * @path /chats/{studentUid}/messages/{messageId}
     * @allow (get) Student with UID 'student123' can read their own chat messages. Admins can read any chat message.
     * @deny (get) Student with UID 'student123' attempts to read chat messages for 'student456'.
     * @principle Enforces ownership for chat messages; admins have universal access.
     */
    match /chats/{studentUid}/messages/{messageId} {
      allow get: if isOwner(studentUid) || isAdmin();
      allow list: if isOwner(studentUid) || isAdmin();
      allow create: if isSignedIn() && (request.resource.data.senderUid == request.auth.uid || isAdmin());
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Stores application-wide settings. There is only one document with id 'attendance' in this collection.
     * @path /settings/attendance
     * @allow (get) Admins can read the settings.
     * @allow (update) Admins can modify the settings.
     * @deny (get) Non-admin attempts to read the settings.
     * @principle Restricts access and modification of settings to admins.
     */
    match /settings/attendance {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if false;
      allow update: if isAdmin() && resource != null;
      allow delete: if false;
    }
  }
}