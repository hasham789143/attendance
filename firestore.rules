/**
 * @fileoverview Firestore Security Rules for Attendance Tracking System
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control.
 * Users can only manage their own data, while admins have broader access.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.  'userId' MUST match the Firebase Auth UID.
 * - /sessions/...: Contains both live and archived attendance session data.
 *   - /sessions/class-current: The currently active class session.
 *   - /sessions/hostel-current: The currently active hostel session.
 *   - /sessions/{sessionId}: Archived session data.
 * - /chats/{studentUid}/messages/{messageId}: Chat messages between admins and students.
 * - /settings/attendance: Application-wide settings.
 *
 * Key Security Decisions:
 * - Users can only read their own profiles and create their own user document. Updates and deletes are disallowed to prevent privilege escalation.
 * - Only authenticated users can create attendance sessions.
 * - Chats are accessible to admins and the specific student the chat is for.
 * - Global settings are readable by all, but only updatable by admins.
 *
 * Denormalization for Authorization:
 *  - The `adminUid` field on the `AttendanceSession` document is used to quickly verify the session creator.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Users can read their own profile and create their own user document.
     * @path /users/{userId}
     * @allow (create) Signed-in user can create their own profile if the UID matches the document ID.
     * @allow (get, list) Signed-in user can read their own profile.
     * @deny (update, delete) No one can update or delete a user profile.
     * @principle Enforces document ownership for creation, and restricts updates/deletes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update, delete: if false;
    }

    /**
     * @description Secure the currently active class attendance session.
     * @path /sessions/class-current
     * @allow (create) Only authenticated users can create the session.
     * @allow (get, list) All users can read the current class session.
     * @allow (update) Only the admin who created the session can update it.
     * @deny (delete) No one can delete the session.
     * @principle Uses ownership for updates.
     */
    match /sessions/class-current {
       function isSignedIn() {
        return request.auth != null;
      }

      allow create: if isSignedIn();
      allow get, list: if true;
      allow update: if isSignedIn() && request.auth.uid == resource.data.adminUid && resource != null;
      allow delete: if false;
    }

    /**
     * @description Secure live attendance records for the currently active class session.
     * @path /sessions/class-current/records/{userId}
     * @allow (create) Any signed-in user can create a record.
     * @allow (get, list) Any signed-in user can read records.
     * @allow (update) Any signed-in user can update records.
     * @allow (delete) No one can delete attendance records.
     */
    match /sessions/class-current/records/{userId} {
       function isSignedIn() {
        return request.auth != null;
      }

      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if false;
    }

     /**
     * @description Secure the currently active hostel attendance session.
     * @path /sessions/hostel-current
     * @allow (create) Only authenticated users can create the session.
     * @allow (get, list) All users can read the current hostel session.
     * @allow (update) Only the admin who created the session can update it.
     * @deny (delete) No one can delete the session.
     * @principle Uses ownership for updates.
     */
    match /sessions/hostel-current {
       function isSignedIn() {
        return request.auth != null;
      }

      allow create: if isSignedIn();
      allow get, list: if true;
      allow update: if isSignedIn() && request.auth.uid == resource.data.adminUid && resource != null;
      allow delete: if false;
    }

    /**
     * @description Secure live attendance records for the currently active hostel session.
     * @path /sessions/hostel-current/records/{userId}
     * @allow (create) Any signed-in user can create a record.
     * @allow (get, list) Any signed-in user can read records.
     * @allow (update) Any signed-in user can update records.
     * @allow (delete) No one can delete attendance records.
     */
    match /sessions/hostel-current/records/{userId} {
       function isSignedIn() {
        return request.auth != null;
      }

      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if false;
    }

    /**
     * @description Secure archived attendance sessions.
     * @path /sessions/{sessionId}
     * @allow (create) Only authenticated users can create archived sessions.
     * @allow (get, list) Any signed-in user can read archived sessions.
     * @allow (update) Only the admin who created the session can update it.
     * @allow (delete) No one can delete the session.
     * @principle Uses ownership for updates.
     */
    match /sessions/{sessionId} {
       function isSignedIn() {
        return request.auth != null;
      }

      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update: if isSignedIn() && request.auth.uid == resource.data.adminUid && resource != null;
      allow delete: if false;
    }

    /**
     * @description Secure individual attendance records for a specific historical session.
     * @path /sessions/{sessionId}/records/{recordId}
     * @allow (create) Any signed-in user can create a record.
     * @allow (get, list) Any signed-in user can read records.
     * @allow (update) Any signed-in user can update records.
     * @allow (delete) No one can delete attendance records.
     */
    match /sessions/{sessionId}/records/{recordId} {
       function isSignedIn() {
        return request.auth != null;
      }

      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if false;
    }

    /**
     * @description Secure chat messages for a specific student. Admins can access all chats.
     * @path /chats/{studentUid}/messages/{messageId}
     * @allow (create) Any signed-in user can create a message.
     * @allow (get, list) Admins and the student can read messages.
     * @allow (update) No one can update chat messages.
     * @allow (delete) No one can delete chat messages.
     * @principle Uses roles and ownership for access control.
     */
    match /chats/{studentUid}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      function isStudent(studentUid) {
        return isSignedIn() && request.auth.uid == studentUid;
      }

      allow create: if isSignedIn();
      allow get, list: if isSignedIn() && (isAdmin() || isStudent(studentUid));
      allow update, delete: if false;
    }

    /**
     * @description Secure application-wide settings. Only admins can update.
     * @path /settings/attendance
     * @allow (get, list) All users can read the settings.
     * @allow (update) Only admins can update the settings.
     * @deny (create, delete) No one can create or delete the settings document.
     * @principle Uses roles for access control.
     */
    match /settings/attendance {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.role == 'admin';
      }

      allow get, list: if true;
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow create, delete: if false;
    }
  }
}