/**
 * @fileOverview Firestore Security Rules for Attendance Tracking System
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles, restricts
 * attendance session creation to authenticated users, and allows public read
 * access to attendance records while enforcing ownership for writes. Application settings are publicly readable.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. 'userId' must match the Firebase Auth UID.
 * - /sessions/current: Stores the current attendance session. Only authenticated users can create.
 * - /attendance/{attendanceId}: Stores attendance records. Publicly readable, but only the owner can modify.
 * - /settings/attendance: Stores application settings. Publicly readable.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Only authenticated users can create an attendance session.
 * - Attendance records are publicly readable to allow for reporting and analysis, but writes are owner-controlled.
 * - Application settings are publicly readable, assuming no sensitive information is stored there.
 *
 * Denormalization for Authorization:
 * - Attendance records MUST include an `uid` field that matches the user's UID to enable owner-only write access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, list, update, delete) User can only access their own profile.
     * @deny (create) User tries to create a profile with a mismatched UID.
     * @deny (update, delete) User tries to modify someone else's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to the current attendance session.
     * @path /sessions/current
     * @allow (create) Authenticated user can create a session. The `adminUid` field must match the user's UID.
     * @allow (get) Any authenticated user can read the current session.
     * @deny (list, update, delete) No listing, updating, or deleting.
     * @principle Requires authentication for creation.
     */
    match /sessions/current {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.adminUid == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to individual attendance records.
     * @path /attendance/{attendanceId}
     * @allow (get, list) Attendance records are publicly readable.
     * @allow (create) Authenticated user can create attendance record with matching uid.
     * @allow (update, delete) Only the owner (the user whose attendance it is) can modify their record, but only if the document exists.
     * @deny (create, update, delete) if not owner of the record.
     * @principle Public read, owner-only write, enforces document existence.
     */
    match /attendance/{attendanceId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
      allow update: if request.auth != null && resource.data.uid == request.auth.uid;
      allow delete: if request.auth != null && resource.data.uid == request.auth.uid;
    }

    /**
     * @description Controls access to application-wide settings.
     * @path /settings/attendance
     * @allow (get, list) Settings are publicly readable.
     * @deny (create, update, delete) Settings cannot be created, updated, or deleted via client.
     * @principle Public read, no write access.
     */
    match /settings/attendance {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}