/**
 * @file Firebase Security Rules for Attendance Tracking System
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles
 * and an admin-centric model for attendance sessions and records.
 *
 * @data_structure
 * - /users/{userId}: Stores user profiles. 'userId' must match the Firebase Auth UID.
 * - /sessions/class-current: Stores the current active class attendance session.
 * - /sessions/class-current/records/{userId}: Stores attendance records for the current class session.
 * - /sessions/hostel-current: Stores the current active hostel attendance session.
 * - /sessions/hostel-current/records/{userId}: Stores attendance records for the current hostel session.
 * - /sessions/{sessionId}: Stores archived attendance sessions.
 * - /sessions/{sessionId}/records/{recordId}: Stores archived attendance records.
 * - /chats/{studentUid}/messages/{messageId}: Stores chat messages for a specific student.
 * - /settings/attendance: Stores global settings; only a single document exists with id "attendance".
 *
 * @key_security_decisions
 * - Users can only read/write their own profile data.
 * - Only authenticated users can access settings.
 * - Listing of users is disallowed.
 * - Admin privileges are not enforced at the database level. It is assumed to be enforced in the application itself.
 * - All sessions and records are only writable to authenticated users for now.
 *
 * @denormalization_for_authorization None required in this version.
 * @structural_segregation No explicit segregation is needed for this data model.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (get) User with matching UID can read their own profile.
     * @allow (create) User can create their profile if the UID matches their auth.
     * @allow (update) User can update their own profile.
     * @allow (delete) User can delete their own profile.
     * @deny (get) User cannot read another user's profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to the current class attendance session document.
     * @path /sessions/class-current
     * @allow (get, list) Any signed-in user can read the current class session.
     * @allow (create, update, delete) Only signed-in users can modify class sessions.
     * @deny (create, update, delete) No additional restrictions (for prototyping).
     * @principle Allows public read access but restricts writes to authenticated users.
     */
    match /sessions/class-current {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

     /**
      * @description Controls access to the current hostel attendance session document.
      * @path /sessions/hostel-current
      * @allow (get, list) Any signed-in user can read the current hostel session.
      * @allow (create, update, delete) Only signed-in users can modify hostel sessions.
      * @deny (create, update, delete) No additional restrictions (for prototyping).
      * @principle Allows public read access but restricts writes to authenticated users.
      */
    match /sessions/hostel-current {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to the attendance records for the current class session.
     * @path /sessions/class-current/records/{userId}
     * @allow (get) Any signed-in user can read a specific record.
     * @allow (create, update, delete) Only signed-in users can modify records (for prototyping).
     * @deny (create, update, delete) No additional restrictions (for prototyping).
     * @principle Restricts writes to authenticated users.
     */
    match /sessions/class-current/records/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
    
    /**
     * @description Controls access to the attendance records for the current hostel session.
     * @path /sessions/hostel-current/records/{userId}
     * @allow (get) Any signed-in user can read a specific record.
     * @allow (create, update, delete) Only signed-in users can modify records (for prototyping).
     * @deny (create, update, delete) No additional restrictions (for prototyping).
     * @principle Restricts writes to authenticated users.
     */
    match /sessions/hostel-current/records/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to archived attendance sessions.
     * @path /sessions/{sessionId}
     * @allow (get, list) Any signed-in user can read archived sessions.
     * @allow (create, update, delete) Only signed-in users can modify sessions (for prototyping).
     * @deny (create, update, delete) No additional restrictions (for prototyping).
     * @principle Allows public read access but restricts writes to authenticated users.
     */
    match /sessions/{sessionId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to archived attendance records.
     * @path /sessions/{sessionId}/records/{recordId}
     * @allow (get) Any signed-in user can read a specific record.
     * @allow (create, update, delete) Only signed-in users can modify records (for prototyping).
     * @deny (create, update, delete) No additional restrictions (for prototyping).
     * @principle Restricts writes to authenticated users.
     */
    match /sessions/{sessionId}/records/{recordId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to chat messages for a specific student.
     * @path /chats/{studentUid}/messages/{messageId}
     * @allow (get) Any signed-in user can read a specific message.
     * @allow (create, update, delete) Only signed-in users can modify messages (for prototyping).
     * @deny (create, update, delete) No additional restrictions (for prototyping).
     * @principle Restricts writes to authenticated users.
     */
    match /chats/{studentUid}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to application-wide settings.
     * @path /settings/attendance
     * @allow (get) Any signed-in user can read the settings.
     * @allow (create, update, delete) Only signed-in users can modify settings (for prototyping).
     * @deny (create, update, delete) No additional restrictions (for prototyping).
     * @principle Restricts writes to authenticated users.
     */
    match /settings/attendance {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}