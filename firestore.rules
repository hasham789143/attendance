rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isAdmin() {
      // In a real app, you would get this from custom claims set on the user's token.
      // return request.auth.token.role == 'admin';
      // For now, we will allow any authenticated user to act as an admin for simplicity,
      // but this should be locked down with custom claims in production.
      return request.auth != null;
    }

    // User profiles can be read/updated by their owner, and created by a new user.
    // Admins can read any profile.
    match /users/{userId} {
      allow read, update, delete: if isOwner(userId);
      allow create: if request.auth.uid == userId;
      allow list: if isAdmin(); // Admins can list users
    }

    // Settings are public to read (for registration page), but only admins can write.
    match /settings/attendance {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Any authenticated user can read session data, but only admins can modify it.
    match /sessions/{document=**} {
        allow read: if request.auth != null;
        allow write: if isAdmin();
    }

    // Chat messages can be read/written by the chat owner or an admin.
    match /chats/{studentUid}/messages/{messageId} {
      allow read, write: if isOwner(studentUid) || isAdmin();
    }
  }
}
