/**
 * @fileoverview Firestore Security Rules for Attendance Tracking System
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model, balancing open access for public content with strict ownership and role-based access for private data.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the user themselves.
 * - /sessions/class-current: Current class attendance session.
 * - /sessions/class-current/records/{userId}: Live attendance records for the current class session, accessible by admins.
 * - /sessions/hostel-current: Current hostel attendance session.
 * - /sessions/hostel-current/records/{userId}: Live attendance records for the current hostel session, accessible by admins.
 * - /sessions/{sessionId}: Archived attendance sessions, accessible only by admins.
 * - /sessions/{sessionId}/records/{recordId}: Archived attendance records for specific sessions, accessible only by admins.
 * - /chats/{studentUid}/messages/{messageId}: Chat messages for a specific student, accessible to the student and admins.
 * - /settings/attendance: Application settings, only accessible to admins.
 *
 * Key Security Decisions:
 * - Users cannot list the /users collection.
 * - Admins have broad access to attendance session data and settings.
 * - Students can only access their own chat messages.
 *
 * Denormalization for Authorization:
 * - Attendance records do not have an explicit `adminUid`. To simplify rules, we rely on the admin to only create attendance sessions via backend.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner and the document exists.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the user is the existing owner, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has the 'admin' role.
     * @returns {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'admin';
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - User can create their own profile if the UID matches.
     * @allow (get, update, delete) - User can only access/modify their own profile.
     * @deny (list) - Users cannot list all user profiles.
     * @deny (create) - User cannot create a profile with a mismatched UID.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the current class attendance session.
     * @path /sessions/class-current
     * @allow (get) - Anyone can read the current class session.
     * @allow (create, update, delete) - Only admins can manage the current class session.
     * @principle Restricts session management to admins.
     */
    match /sessions/class-current {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for live attendance records for the current class session.
     * @path /sessions/class-current/records/{userId}
     * @allow (get, list) - Only admins can read live attendance records.
     * @allow (create, update, delete) - Only admins can manage live attendance records.
     * @principle Restricts live attendance data access to admins.
     */
    match /sessions/class-current/records/{userId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the current hostel attendance session.
     * @path /sessions/hostel-current
     * @allow (get) - Anyone can read the current hostel session.
     * @allow (create, update, delete) - Only admins can manage the current hostel session.
     * @principle Restricts session management to admins.
     */
    match /sessions/hostel-current {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for live attendance records for the current hostel session.
     * @path /sessions/hostel-current/records/{userId}
     * @allow (get, list) - Only admins can read live attendance records.
     * @allow (create, update, delete) - Only admins can manage live attendance records.
     * @principle Restricts live attendance data access to admins.
     */
    match /sessions/hostel-current/records/{userId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for archived attendance sessions.
     * @path /sessions/{sessionId}
     * @allow (get, list) - Only admins can read archived sessions.
     * @allow (create, update, delete) - Only admins can manage archived sessions.
     * @principle Restricts archived session data access to admins.
     */
    match /sessions/{sessionId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for archived attendance records for specific sessions.
     * @path /sessions/{sessionId}/records/{recordId}
     * @allow (get, list) - Only admins can read archived attendance records.
     * @allow (create, update, delete) - Only admins can manage archived attendance records.
     * @principle Restricts archived attendance record access to admins.
     */
    match /sessions/{sessionId}/records/{recordId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for chat messages for a specific student.
     * @path /chats/{studentUid}/messages/{messageId}
     * @allow (get, list, create) - Student can read and create their own messages. Admins can read all messages.
     * @allow (update, delete) - Only admins can update/delete messages.
     * @deny (create) - Students cannot create messages for other users.
     * @principle Restricts chat access to the student and admins.
     */
    match /chats/{studentUid}/messages/{messageId} {
      allow get, list: if isOwner(studentUid) || isAdmin();
      allow create: if isOwner(studentUid);
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for application settings.
     * @path /settings/attendance
     * @allow (get) - Anyone can read attendance settings.
     * @allow (create, update, delete) - Only admins can manage application settings.
     * @principle Restricts setting management to admins.
     */
    match /settings/attendance {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}