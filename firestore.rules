/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with ownership constraints.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the user themselves.
 * - /sessions/class-current: Current class attendance session (single document).
 * - /sessions/class-current/records/{userId}: Live attendance records for the current class session, accessible by admins.
 * - /sessions/hostel-current: Current hostel attendance session (single document).
 * - /sessions/hostel-current/records/{userId}: Live attendance records for the current hostel session, accessible by admins.
 * - /sessions/{sessionId}: Archived attendance sessions.
 * - /sessions/{sessionId}/records/{recordId}: Archived attendance records.
 * - /chats/{studentUid}/messages/{messageId}: Chat messages, with admin and student access control.
 * - /settings/attendance: Application-wide settings (single document).
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Admins have broad access to attendance session and record data.
 * - Chats are accessible to admins and the specific student.
 * - Listing of users is disallowed.
 * - Settings are publicly readable, but only updatable by admin
 *
 * Denormalization for Authorization:
 * - The rules rely on the `request.auth.uid` to match the document ID in the `/users/{userId}` collection,
 *   enforcing that users can only manage their own data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an admin.
     */
    function isAdmin() {
      return request.auth.token.role == 'admin';
    }

    /**
     * @description Checks if the document exists and the authenticated user's UID matches the provided userId.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
    }
    
    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their UID.
     * @allow (get, update, delete) - Authenticated user can get, update, or delete their own profile if the userId matches their UID.
     * @deny (create) - If the userId does not match the authenticated user's UID.
     * @deny (get, update, delete) - If the userId does not match the authenticated user's UID or the document does not exist.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.auth.uid == request.resource.data.uid;
      allow update: if isOwner(userId) && request.auth.uid == request.resource.data.uid;
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the current class attendance session.
     * @path /sessions/class-current
     * @allow (get, list) - Anyone can read the current class attendance session.
     * @allow (create, update, delete) - Only admins can create, update, or delete the current class attendance session.
     * @principle Restricts write access to admins.
     */
    match /sessions/class-current {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for live attendance records for the current class session.
     * @path /sessions/class-current/records/{userId}
     * @allow (get, list) - Only admins can get and list the live attendance records for the current class session.
     * @allow (create, update, delete) - Only admins can create, update, or delete the live attendance records for the current class session.
     * @principle Restricts access to admins.
     */
    match /sessions/class-current/records/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

        /**
     * @description Rules for the current hostel attendance session.
     * @path /sessions/hostel-current
     * @allow (get, list) - Anyone can read the current hostel attendance session.
     * @allow (create, update, delete) - Only admins can create, update, or delete the current hostel attendance session.
     * @principle Restricts write access to admins.
     */
    match /sessions/hostel-current {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for live attendance records for the current hostel session.
     * @path /sessions/hostel-current/records/{userId}
     * @allow (get, list) - Only admins can get and list the live attendance records for the current hostel session.
     * @allow (create, update, delete) - Only admins can create, update, or delete the live attendance records for the current hostel session.
     * @principle Restricts access to admins.
     */
    match /sessions/hostel-current/records/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for archived attendance sessions.
     * @path /sessions/{sessionId}
     * @allow (get, list) - Only admins can get and list the archived attendance sessions.
     * @allow (create, update, delete) - Only admins can create, update, or delete the archived attendance sessions.
     * @principle Restricts access to admins.
     */
    match /sessions/{sessionId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for individual attendance records for a specific historical session.
     * @path /sessions/{sessionId}/records/{recordId}
     * @allow (get, list) - Only admins can get and list the individual attendance records for a specific historical session.
     * @allow (create, update, delete) - Only admins can create, update, or delete the individual attendance records for a specific historical session.
     * @principle Restricts access to admins.
     */
    match /sessions/{sessionId}/records/{recordId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for chat messages for a specific student.
     * @path /chats/{studentUid}/messages/{messageId}
     * @allow (get, list) - Admins and the student can get and list the chat messages.
     * @allow (create) - The student and admin can create chat messages.
     * @allow (update, delete) - No one can update or delete a chat message.
     * @principle Restricts access to admins and the specific student.
     */
    match /chats/{studentUid}/messages/{messageId} {
      allow get: if isAdmin() || isOwner(studentUid);
      allow list: if false;
      allow create: if isAdmin() || isOwner(studentUid);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for application-wide settings.
     * @path /settings/attendance
     * @allow (get) - Anyone can read the settings.
     * @allow (update) - Only admins can update the settings.
     * @principle Restricts write access to admins.
     */
    match /settings/attendance {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if isAdmin();
      allow delete: if false;
    }
  }
}