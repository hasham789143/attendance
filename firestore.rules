rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data.
     * @path /users/{userId}
     * @allow (read, write) if request.auth.uid == userId: Allows a user to read and write their own profile.
     * @allow (read, write) if request.auth.token.email == "admin@gmail.com": Allows the admin to read and write all profiles.
     * @deny (read, write) if request.auth.uid != userId and request.auth.token.email != "admin@gmail.com": Denies access to other users' profiles.
     * @principle Enforces user ownership and admin override.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
        return request.auth.token.email == "admin@gmail.com";
      }
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false; // Do not allow listing of all users
      allow create: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin());
    }

    /**
     * @description Manages the current class attendance session.
     * @path /sessions/class-current
     * @allow (get) if true: Allows anyone to read the current session.
     * @allow (create, update, delete) if isAdmin(): Allows only admins to modify the session.
     * @deny (create, update, delete) if !isAdmin(): Denies non-admins from modifying the session.
     * @principle Enforces admin-only writes for session management.
     */
    match /sessions/class-current {
      function isAdmin() {
        return request.auth.token.email == "admin@gmail.com";
      }

      allow get: if true;
      allow list: if false; // Single document
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages live attendance records for the current class session.
     * @path /sessions/class-current/records/{userId}
     * @allow (get) if isAdmin(): Allows admins to read any record.
     * @allow (list) if isAdmin(): Allows admins to list all records.
     * @allow (create, update) if isAdmin(): Allows admins to modify any record.
     * @allow (delete) if isAdmin(): Allows admins to delete any record.
     * @deny (get, list, create, update, delete) if !isAdmin(): Denies non-admins from managing records.
     * @principle Enforces admin-only access for managing attendance records.
     */
    match /sessions/class-current/records/{userId} {
      function isAdmin() {
        return request.auth.token.email == "admin@gmail.com";
      }

      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages the current hostel attendance session.
     * @path /sessions/hostel-current
     * @allow (get) if true: Allows anyone to read the current session.
     * @allow (create, update, delete) if isAdmin(): Allows only admins to modify the session.
     * @deny (create, update, delete) if !isAdmin(): Denies non-admins from modifying the session.
     * @principle Enforces admin-only writes for session management.
     */
    match /sessions/hostel-current {
      function isAdmin() {
        return request.auth.token.email == "admin@gmail.com";
      }

      allow get: if true;
      allow list: if false; // Single document
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages live attendance records for the current hostel session.
     * @path /sessions/hostel-current/records/{userId}
     * @allow (get) if isAdmin(): Allows admins to read any record.
     * @allow (list) if isAdmin(): Allows admins to list all records.
     * @allow (create, update) if isAdmin(): Allows admins to modify any record.
     * @allow (delete) if isAdmin(): Allows admins to delete any record.
     * @deny (get, list, create, update, delete) if !isAdmin(): Denies non-admins from managing records.
     * @principle Enforces admin-only access for managing attendance records.
     */
    match /sessions/hostel-current/records/{userId} {
      function isAdmin() {
        return request.auth.token.email == "admin@gmail.com";
      }

      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages archived attendance sessions.
     * @path /sessions/{sessionId}
     * @allow (get) if isAdmin(): Allows admins to read any session.
     * @allow (list) if isAdmin(): Allows admins to list all sessions.
     * @allow (create, update, delete) if isAdmin(): Allows admins to manage sessions.
     * @deny (get, list, create, update, delete) if !isAdmin(): Denies non-admins from managing sessions.
     * @principle Enforces admin-only access for archived sessions.
     */
    match /sessions/{sessionId} {
      function isAdmin() {
        return request.auth.token.email == "admin@gmail.com";
      }

      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages individual attendance records for historical sessions.
     * @path /sessions/{sessionId}/records/{recordId}
     * @allow (get) if isAdmin(): Allows admins to read any record.
     * @allow (list) if isAdmin(): Allows admins to list records in a session.
     * @allow (create, update, delete) if isAdmin(): Allows admins to manage records.
     * @deny (get, list, create, update, delete) if !isAdmin(): Denies non-admins from managing records.
     * @principle Enforces admin-only access for historical attendance records.
     */
    match /sessions/{sessionId}/records/{recordId} {
      function isAdmin() {
        return request.auth.token.email == "admin@gmail.com";
      }

      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages chat messages for individual students.
     * @path /chats/{studentUid}/messages/{messageId}
     * @allow (get) if isOwner(studentUid) || isAdmin(): Allows the student and admin to read messages.
     * @allow (list) if isOwner(studentUid) || isAdmin(): Allows the student and admin to list messages.
     * @allow (create) if isAdmin(): Allows admins to create messages.
     * @deny (update, delete) if true: Messages cannot be updated or deleted.
     * @principle Restricts access to chat messages to the student and admins.
     */
    match /chats/{studentUid}/messages/{messageId} {
      function isOwner(studentUid) {
        return request.auth.uid == studentUid;
      }

      function isAdmin() {
        return request.auth.token.email == "admin@gmail.com";
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && (isOwner(studentUid) || isAdmin());
      allow list: if isSignedIn() && (isOwner(studentUid) || isAdmin());
      allow create: if isSignedIn() && isAdmin();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages application-wide settings.
     * @path /settings/attendance
     * @allow (get) if true: Allows anyone to read the settings.
     * @allow (create, update, delete) if isAdmin(): Allows only admins to modify the settings.
     * @deny (create, update, delete) if !isAdmin(): Denies non-admins from modifying the settings.
     * @principle Enforces admin-only writes for application settings.
     */
    match /settings/attendance {
      function isAdmin() {
        return request.auth.token.email == "admin@gmail.com";
      }

      allow get: if true;
      allow list: if false; // Single document
      allow create: if false; // Create is not allowed as the document should exist.
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}